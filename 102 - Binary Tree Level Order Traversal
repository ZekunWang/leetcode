/*
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        return solution1(root);
    }
private:
    vector<vector<int>> v;
    vector<vector<int>> solution1(TreeNode *root){
        if(!root) return v;
        subSol1(root, 1);
        return v;
    }
    void subSol1(TreeNode *node, int depth){
        if(!node) return;
        if(v.size() < depth) v.push_back(vector<int>());
        v[depth - 1].push_back(node->val);
        subSol1(node->left, depth + 1);
        subSol1(node->right, depth + 1);
    }
};
