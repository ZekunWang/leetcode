/*
Given a list of non negative integers, arrange them such that they form the largest number.

For example, given [3, 30, 34, 5, 9], the largest formed number is 9534330.

Note: The result may be very large, so you need to return a string instead of an integer.
*/

class Solution {
public:
    string largestNumber(vector<int>& nums) {
        int i(0), sz(nums.size());
        string s;
        if(!sz) s;
        if(sz == 1) return to_string(nums[0]);
        inverseMergeSort(nums, 0, nums.size() - 1);
        while(i < sz - 1 && nums[i] == 0 && nums[i + 1] == 0) i++;
        while(i < nums.size()) s += to_string(nums[i++]);
        return s ;
    }
private:
    void inverseMergeSort(vector<int> &v, int lo, int hi){
        if(lo == hi) return;
        int mid((lo + hi) / 2), lhi(mid), rlo(mid + 1);
        inverseMergeSort(v, lo, lhi);
        inverseMergeSort(v, rlo, hi);
        inverseMerge(v, lo, lhi, rlo, hi);
    }
    void inverseMerge(vector<int> &v, int l1, int h1, int l2, int h2){
        while(l1 <= h1){
            if(compare(v[l2], v[l1]) == 1){
                swap(v[l1], v[l2]);
                int i(l2);
                while(++i <= h2 && compare(v[i], v[i - 1]) == 1) swap(v[i - 1], v[i]);
            }
            l1++;
        }
    }
    int compare1(int n1, int n2){       //easy but slow compare
        if(n1 == n2) return 0;
        string s1(to_string(n1)), s2(to_string(n2));
        return s1 + s2 > s2 + s1 ? 1 : -1;
    }
    int compare(int n1, int n2){        //complicate but fast compare
        if(n1 == n2) return 0;
        int tmp1(n1), tmp2(n2), scale1(1), scale2(1);
        while(tmp1 >= 10){
            scale1 *= 10;
            tmp1 /= 10;
        }
        while(tmp2 >= 10){
            scale2 *= 10;
            tmp2 /= 10;
        }
        tmp1 = n1;
        tmp2 = n2;
        int ts1(scale1), ts2(scale2);
        while(ts1 < ts2){
            tmp1 = tmp1 * 10 + (n2 / ts2) % 10;
            ts2 /= 10;
        }
        while(ts1 > ts2){
            tmp2 = tmp2 * 10 + (n1 / ts1) % 10;
            ts1 /= 10;
        }
        if(tmp1 == tmp2){
            tmp1 = tmp1 * 10 + (n2 / ts2) % 10;
            tmp2 = tmp2 * 10 + (n1 / ts1) % 10;
        }
        return tmp1 == tmp2 ? (scale1 < scale2 ? 1 : -1) : (tmp1 > tmp2 ? 1 : -1);
    }
};
