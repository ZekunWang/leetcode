/*
Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the 
researcher's h-index.

According to the definition of h-index on Wikipedia: "A scientist has index h if h of his/her N papers have at least h 
citations each, and the other N âˆ’ h papers have no more than h citations each."

For example, given citations = [3, 0, 6, 1, 5], which means the researcher has 5 papers in total and each of them had 
received 3, 0, 6, 1, 5 citations respectively. Since the researcher has 3 papers with at least 3 citations each and the 
remaining two with no more than 3 citations each, his h-index is 3.

Note: If there are several possible values for h, the maximum one is taken as the h-index.

Hint:
An easy approach is to sort the array first.
What are the possible values of h-index?
A faster approach is to use extra space.
*/

#include <iostream>
#include <vector>
using namespace std;

class Solution {
    int solution1(vector<int> &v);
    int solution1(vector<int> &v, int lo, int hi);
    int solution2(vector<int> &v);
public:
    int hIndex(vector<int>& citations) {
        //return solution1(citations);
        return solution2(citations);
    }
};

int Solution::solution1(vector<int> &v){
    sort(v.begin(), v.end());
    return solution1(v, 0, v.size() - 1);
}

int Solution::solution1(vector<int> &v, int lo, int hi){
    if(lo > hi) return v.size() - lo;
    int mid((lo + hi) / 2), cnt(v.size() - mid);
    if(v[mid] < cnt) return solution1(v, mid + 1, hi);
    return solution1(v, lo, mid - 1);
}

int Solution::solution2(vector<int> &v){
    int sz(v.size()), tmp[sz + 1] = {};
    memset(tmp, 0, 4 * (sz + 1));
    for(int i = 0; i < sz; i++)
        tmp[v[i] >= sz ? sz : v[i]]++;
    for(int i = sz; i >= 0; i--){
        if(tmp[i] >= i) return i;
        else tmp[i - 1] += tmp[i];
    }
}
