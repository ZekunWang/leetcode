/*
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note: 
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? 
How would you optimize the kthSmallest routine?

Hint:

Try to utilize the property of a BST.
What if you could modify the BST node's structure?
The optimal runtime complexity is O(height of BST).
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        int count = 0;
        return traversal(root, k, &count)->val;
    }
private:
    TreeNode* traversal(TreeNode *root, int k, int *count){
        if(!root) return NULL;
        TreeNode *left, *right;
        left = traversal(root->left, k, count);
        if(*count == k) return left;
        (*count)++;
        if(*count == k) return root;
        return traversal(root->right, k, count);
    }
};
