/*
Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all 
unique quadruplets in the array which gives the sum of target.

Note:
Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
The solution set must not contain duplicate quadruplets.
    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

    A solution set is:
    (-1,  0, 0, 1)
    (-2, -1, 1, 2)
    (-2,  0, 0, 2)
*/

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int sz(nums.size() - 1);
        vector<vector<int>> v;
        sort(nums.begin(), nums.end());
        if(sz < 3 || nums[0] > 0 || nums[sz] < 0) return v;
        for(int i = 0; i <= sz - 3; i++){
            int sum3(target - nums[i]);
            for(int j = i+1; j <= sz - 2; j++){
                int k(j+1), l(sz), sum2(sum3 - nums[j]);
                while(k < l){
                    int tmp(nums[k] + nums[l]);
                    if(tmp > sum2) l--;
                    else if(tmp < sum2) k++;
                    else{
                        v.push_back(vector<int> ({nums[i], nums[j], nums[k++], nums[l--]}));
                        while(k < l && nums[l] == nums[l+1]) l--;
                        if(k == 3) sz = l + 1;
                        while(k < l && nums[k] == nums[k-1]) k++;
                    }
                }
                while(j <= sz - 2 && nums[j+1] == nums[j]) j++;
            }
            while(i <= sz - 3 && nums[i+1] == nums[i]) i++;
        }
        return v;
    }
};
