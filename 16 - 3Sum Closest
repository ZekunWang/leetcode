/*
Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. 
Return the sum of the three integers. You may assume that each input would have exactly one solution.

For example, given array S = {-1 2 1 -4}, and target = 1.
The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
*/

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int sz(nums.size()), sum(target > 0 ? INT_MAX : (INT_MAX + target));
        sort(nums.begin(), nums.end());
        for(int i = 0; i < sz - 2; i++){
            int j(i+1), k(sz - 1);
            while(j < k){
                int tmp(nums[i] + nums[j] + nums[k]);
                if(tmp == target) return target;
                else if(tmp > target){
                    k--;
                    while(j < k && nums[k] == nums[k+1]) k--;
                }else{
                    j++;
                    while(j < k && nums[j] == nums[j-1]) j++;
                }
                sum = (abs(sum - target) < abs(tmp - target)) ? sum : tmp;
            }
            while(i < sz - 2 && nums[i+1] == nums[i]) i++;
        }
        return sum;
    }
};
