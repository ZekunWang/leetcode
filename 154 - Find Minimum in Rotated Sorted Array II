/*
Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element. The array may contain duplicates.
*/

class Solution {
public:
    int findMin(vector<int>& nums) {
    //    return solution2(nums, 0, nums.size() - 1);
        return solution3(nums, 0, nums.size() - 1);
    }
private:
    int solution2(vector<int> v, int lo, int hi){
        if(hi - lo < 2) return min(v[hi], v[lo]);
        if(v[lo] < v[hi]) return v[lo];
        int mid((lo + hi) / 2);
        return min(solution2(v, lo, mid), solution2(v, mid + 1, hi));
    }
    int solution3(vector<int> &v, int lo, int hi){
        if(lo > hi) return v[lo];
        int mid = (lo + hi) / 2;
        if(v[mid] < v[hi]) return solution3(v, lo, mid);
        else if(v[mid] > v[hi]) return solution3(v, mid + 1, hi);
        else return solution3(v, lo, hi - 1);
    }
};
