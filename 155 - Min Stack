/*
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
*/

class MinStack{
private:
    stack<int> st, tmp;
    int m;
public:
    void push(int x) {
        if(st.empty()) m = x;
        else m = min(x, m);
        st.push(x);
    }

    void pop() {
        int t = st.top();
        st.pop();
        if(m == t){
            m = st.top();
            while(!st.empty()){
                t = st.top();
                if(t < m) m = t;
                tmp.push(t);
                st.pop();
            }
            while(!tmp.empty()){
                st.push(tmp.top());
                tmp.pop();
            }
        }
    }

    int top() {
        return st.top();
    }

    int getMin() {
        return m;
    }
};
