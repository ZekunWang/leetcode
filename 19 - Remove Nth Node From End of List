/*
Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode newHead(0);
        newHead.next = head;
        count = n;
        return solution1(&newHead);      //recursive
        //return solution2(&newHead);       //iterative
    }
private:
    int count;
    ListNode* solution1(ListNode *newHead) {
        subSol1(newHead);
        return newHead->next;
    }
    bool subSol1(ListNode *node){
        if(!node) return false;
        if(subSol1(node->next)) return true;
        if(count--) return false;
        ListNode *tmp= node->next;
        node->next = tmp->next;
        delete tmp;
        return true;
    }
    ListNode *solution2(ListNode *newHead){
        ListNode *tmp, *cur;
        tmp = cur = newHead;
        while(count--) tmp = tmp->next;
        while(tmp->next){
            cur = cur->next;
            tmp = tmp->next;
        }
        tmp = cur->next;
        cur->next = tmp->next;
        delete tmp;
        return newHead->next;
        
    }
};
