/*
Given a sorted linked list, delete all nodes that have duplicate numbers, 
leaving only distinct numbers from the original list.

For example,
Given 1->2->3->3->4->4->5, return 1->2->5.
Given 1->1->1->2->3, return 2->3.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        return solution1(head);
    }
private:
    ListNode *solution1(ListNode *head){
        ListNode newHead(0), *cur(&newHead), *tmp;
        newHead.next = head;
        bool dist(true);
        int tg;
        while(cur->next){
            tmp = cur->next;
            if(tmp->next && tmp->val == tmp->next->val){
                tg = tmp->val;
                while(tmp && tmp->val == tg){
                    cur->next = tmp->next;
                    delete tmp;
                    tmp = cur->next;
                }
            }else if(!tmp->next) break;
            else cur = cur->next;
        }
        return newHead.next;
    }
};
