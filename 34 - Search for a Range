/*
Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].
*/

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        v.push_back(-1);
        v.push_back(-1);
        solution1(nums, 0, nums.size() - 1, target);
        return v;
    }
private:
    vector<int> v;
    void solution1(vector<int> &src, int lo, int hi, int tg){
        if(lo > hi) return;
        int mid = (lo + hi) / 2;
        if(src[mid] < tg) solution1(src, mid + 1, hi, tg);
        else if(src[mid] > tg) solution1(src, lo, mid - 1, tg);
        else{
            if(v[0] == -1) v[0] = v[1] = mid;
            else{
                v[0] = min(v[0], mid);
                v[1] = max(v[1], mid);
            }
            solution1(src, mid + 1, hi, tg);
            solution1(src, lo, mid - 1, tg);
        }
    }
};
