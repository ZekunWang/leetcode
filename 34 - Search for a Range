/*
Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].
*/

#include <iostream>
#include <vector>
using namespace std;

class Solution {
    vector<int> res;
    void solution1(vector<int> &v, int lo, int hi, int tg);
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        res.push_back(-1);
        res.push_back(-1);
        solution1(nums, 0, nums.size() - 1, target);
        return res;
    }
};

void Solution::solution1(vector<int> &v, int lo, int hi, int tg){
    if(lo > hi) return;
    int mid((lo + hi) / 2);
    if(v[mid] == tg){
        if(res[0] != -1){
            res[0] = min(res[0], mid);
            res[1] = max(res[1], mid);
        }else res[0] = res[1] = mid;
        solution1(v, lo, mid - 1, tg);
        solution1(v, mid + 1, hi, tg);
    }else if(v[mid] < tg) solution1(v, mid + 1, hi, tg);
    else solution1(v, lo, mid - 1, tg);
}
