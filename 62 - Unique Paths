/*
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner 
of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?

Note: m and n will be at most 100.
*/

class Solution {
public:
    int uniquePaths(int m, int n) {
        if(m == 1 || n == 1) return 1;
        return solution1(m + n - 2, min(m, n) - 1);
    }
private:
    int solution1(int tot, int n){
        long mult(tot), muln(n);
        for(int i = tot - 1, j = n - 1; i > tot - n && j > 0; i--, j--){
            mult *= i;
            muln *= j;
            int a[3] = {2,3,5};
            for(int i = 0; i < 3; i++){
                while(mult % a[i] == 0 && muln % a[i] == 0){
                    mult /= a[i];
                    muln /= a[i];
                }
            }
        }
        return mult / muln;
    }
};
