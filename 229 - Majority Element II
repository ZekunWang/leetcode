/*
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. 
The algorithm should run in linear time and in O(1) space.

Hint: How many majority elements could it possibly have?
*/

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        return solution1(nums);
    }
private:
    vector<int> r;
    vector<int> solution1(vector<int> &v){
        int c1(0), c2(0), chk1(INT_MIN), chk2(INT_MIN), sz(v.size());
        if(sz < 2) return v;
        for(int i : v){
            if(i == chk1) c1++;
            else if(i == chk2) c2++;
            else if(!c1) chk1 = i, c1 = 1;
            else if(!c2) chk2 = i, c2 = 1;
            else c1--, c2--;
        }
        c1 = c2 = 0;
        for(int i : v){
            if(i == chk1) c1++;
            if(i == chk2) c2++;
        }
        if(c1 > sz / 3) r.push_back(chk1);
        if(c2 > sz / 3) r.push_back(chk2);
        return r;
    }
};
