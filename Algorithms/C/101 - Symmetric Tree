/*
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following is not:
    1
   / \
  2   2
   \   \
   3    3
Note:
Bonus points if you could solve it both recursively and iteratively.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

bool subSol1(struct TreeNode *left, struct TreeNode *right){
    if(!left && !right) return true;
    if(!left || !right) return false;
    if(left->val != right->val) return false;
    return subSol1(left->right, right->left) && subSol1(left->left, right->right);
} 

bool solution1(struct TreeNode *root){
    if(!root) return true;
    return subSol1(root->left, root->right);
}

bool isSymmetric(struct TreeNode* root) {
    return solution1(root);
}
