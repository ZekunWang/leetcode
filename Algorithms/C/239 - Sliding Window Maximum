/*
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to 
the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

For example,
Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Therefore, return the max sliding window as [3,3,5,5,6,7].

Note: 
You may assume k is always valid, ie: 1 ≤ k ≤ input array's size for non-empty array.

Follow up:
Could you solve it in linear time?

Hint:

How about using a data structure such as deque (double-ended queue)?
The queue size need not be the same as the window’s size.
Remove redundant elements and the queue should store only elements that need to be considered.
*/

/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */

int *solution1(int *a, int sz, int k, int *rsz){
    int tmp[sz], pos = 0, posr = 0;
    for(int i = 0; i < sz; i++) tmp[i] = i;  //use tmp as deque
    for(int i = 0; i < sz; i++){
        if(pos < sz && pos <= i-k) pos = tmp[pos+1];
        for(int b = i-1; b >= pos && a[b] <= a[i]; b--) tmp[b] = i;
        if(i >= k - 1) tmp[posr++] = a[tmp[pos]];
    }
    int *res = malloc(sizeof(int) * posr);
    for(int i = 0; i < posr; i++) res[i] = tmp[i];
    (*rsz) = posr;
    return res;
}

int* maxSlidingWindow(int* nums, int numsSize, int k, int* returnSize) {
    return solution1(nums, numsSize, k, returnSize);
}
