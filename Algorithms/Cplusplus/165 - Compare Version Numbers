/*
Compare two version numbers version1 and version2.
If version1 > version2 return 1, if version1 < version2 return -1, otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the 
second first-level revision.

Here is an example of version numbers ordering:

0.1 < 1.1 < 1.2 < 13.37
*/

#include <iostream>
#include <string>
using namespace std;

class Solution {
    int solution1(string &s1, string &s2);
    int compareNum(string s1, string s2);
    string getNum(string &s, int &pos);
public:
    int compareVersion(string version1, string version2) {
        return solution1(version1, version2);
    }
};

int Solution::solution1(string &s1, string &s2){
    int pos1(0), pos2(0);
    while(pos1 < s1.length() || pos2 < s2.length()){
        string t1(pos1 < s1.length() ? getNum(s1, pos1) : "");
        string t2(pos2 < s2.length() ? getNum(s2, pos2) : "");
        int r = compareNum(t1, t2);
        if(r) return r > 0 ? 1 : -1;
    }
    return 0;
}

int Solution::compareNum(string s1, string s2){
    int p1(0), p2(0);
    while(p1 < s1.length() && s1[p1] == '0') p1++;
    while(p2 < s2.length() && s2[p2] == '0') p2++;
    if(p1 == s1.length() && p2 == s2.length()) return 0;
    string ts1(s1.substr(p1)), ts2(s2.substr(p2));
    if(ts1.length() == ts2.length())
        return ts1.compare(ts2);
    return ts1.length() > ts2.length() ? 1 : -1;
}

string Solution::getNum(string &s, int &pos){
    int st(pos);
    while(pos < s.length() && s[pos] != '.') pos++;
    return s.substr(st, pos++ - st);
}


class Solution {
public:
    int compareVersion(string version1, string version2) {
        //return solution1(version1, version2);       //iterative
        return solution2(version1, -1, version1.length(), version2, -1, version2.length());       //recursive
    }
private:
    int solution1(string v1, string v2) {
        int sz1 = v1.length(), sz2 = v2.length(), num1(0), num2(0), i1(-1), i2(-1);
        while(i1 < sz1 && i2 < sz2){            //compare numbers when both not reach end of string
            num1 = getNum(v1, ++i1, sz1);
            num2 = getNum(v2, ++i2, sz2);
            if(num1 != num2) return num1 > num2 ? 1 : -1;
        }
        if(num1 != num2) return num1 > num2 ? 1 : -1;   //compare last numbers before loop breaks
        while(i1 < sz1)         //check remaining numbers for version 1 if has
            if(getNum(v1, ++i1, sz1) != 0) return 1;
        while(i2 < sz2)         //check remaining numbers for version 2 if has
            if(getNum(v2, ++i2, sz2) != 0) return -1;
        return 0;               //equai if all remaining numbers are 0s or no remaining numbers
    }
    int getNum(string v, int &pos, int sz){     //get number based on '.' and lengh of string
        int num(0);
        while(pos < sz){
            if(v[pos] == '.') break;
            num = 10 * num + (v[pos++] - '0');
        }
        return num;
    }
    int solution2(string v1, int i1, int len1, string v2, int i2, int len2){
        if(i1 == len1 && i2 == len2) return 0;
        if(i1 == len1) while(getNum(v2, ++i2, len2) != 0) return -1;
        else if(i2 == len2) while(getNum(v1, ++i1, len1) != 0) return 1;
        else{
            int num1 = getNum(v1, ++i1, len1), num2 = getNum(v2, ++i2, len2);
            if(num1 != num2) return num1 > num2 ? 1 : -1;
        }
        return solution2(v1, i1, len1, v2, i2, len2);
    }
};
