/*
Reverse bits of a given 32 bits unsigned integer.
For example, given input 43261596 (represented in binary as 00000010100101000001111010011100), 
return 964176192 (represented in binary as 00111001011110000010100101000000).
Follow up:
If this function is called many times, how would you optimize it?
*/
class Solution {
public:
    uint32_t reverseBits(uint32_t n) {
        int count = 31;
        //return solution1(n);    //iterative
        return solution2(n, count);    //recursive
    }
private:
    uint32_t solution1(uint32_t n){
        uint32_t r(0), count(32);
        while(n){
            r <<= 1;
            r |= n & 1;
            n >>= 1;
            count--;
        }
        return r << count;
    }
    uint32_t solution2(uint32_t n, int count){
        if(!n) return 0;
        return ((n & 1) << count) + solution2(n >> 1, count-1);
    }
};
