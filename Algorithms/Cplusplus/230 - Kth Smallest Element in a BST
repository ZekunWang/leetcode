/*
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note: 
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? 
How would you optimize the kthSmallest routine?

Hint:

Try to utilize the property of a BST.
What if you could modify the BST node's structure?
The optimal runtime complexity is O(height of BST).
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
#include <iostream>
using namespace std;

class Solution {
    int solution1(TreeNode *root, int &k, int &cnt);
public:
    int kthSmallest(TreeNode* root, int k) {
        int cnt(0);
        return solution1(root, k, cnt);
    }
};

int Solution::solution1(TreeNode *root, int &k, int &cnt){
    if(!root) return 0;
    int tmp;
    if(root->left) tmp = solution1(root->left, k, cnt);
    if(cnt == k) return tmp;
    if(++cnt == k) return root->val;
    return solution1(root->right, k, cnt);
}
