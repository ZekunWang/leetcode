/*
Given n, how many structurally unique BST's (binary search trees) that store values 1...n?

For example,
Given n = 3, there are a total of 5 unique BST's.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
*/

#include <iostream>
#include <unorderead_map>
#include <vector>
using namespace std;

class Solution {
    unordered_map<int, int> m;
    int solution1(int n);
    int solution2(int n);
public:
    int numTrees(int n) {
        //return solution1(n);   //unordered_map
        return solution2(n);  //vector
    }
};

int Solution::solution1(int n){
    m[1] = m[0] = 1;
    for(int i = 2; i <= n; i++){
        int sum(0);
        for(int j = 0; j < i / 2; j++)
            sum += m[j] * m[i - j - 1];
        sum *= 2;
        if(i % 2) sum += m[i / 2] * m[i / 2];
        m[i] = sum;
    }
    return m[n];
}

int Solution::solution2(int n){
    vector<int> v(n+1, 0);
    v[0] = v[1] = 1;
    for(int i = 2; i < v.size(); i++){
        for(int j = 0; j < i / 2; j++)
            v[i] += v[j] * v[i - j - 1];
        v[i] *= 2;
        if(i % 2) v[i] += v[i / 2] * v[i / 2];
    }
    return v.back();
}
