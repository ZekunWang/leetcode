/*
Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

You may assume no duplicate exists in the array.
*/

#include <iostream>
#include <vector>
using namespace std;

class Solution {
    int solution1(vector<int> &n, int lo, int hi);
public:
    int findMin(vector<int>& nums) {
        return solution1(nums, 0, nums.size() - 1);
    }
};

int Solution::solution1(vector<int> &n, int lo, int hi){
    if(lo >= hi) return n[lo];
    int mid((lo + hi) / 2);
    if(n[mid] > n[hi]) return solution1(n, mid + 1, hi);
    return solution1(n, lo, mid);
}
