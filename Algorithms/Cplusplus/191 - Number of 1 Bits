/*
Write a function that takes an unsigned integer and returns the number of â€™1' bits it has 
(also known as the Hamming weight).
For example, the 32-bit integer â€™11' has binary representation 00000000000000000000000000001011, 
so the function should return 3.
*/
class Solution {
public:
    int hammingWeight(uint32_t n) {
        //return solution1(n);    //iterative
        return solution2(n);    //recursive
        //return solution3(n);
    }
private:
    int solution1(uint32_t n){
        int count;
        while(n){
            if(n & 1) count++;
            n = n >> 1;
        }
        return count;
    }
    int solution2(uint32_t n){
        if(!n) return 0;
        return (n & 1) + solution2(n>>1);
    }
    int solution3(uint32_t n) {
        int res =0;
        while (n){
            n = n & (n-1);
            res++;
        }
        return res;
    }
};
