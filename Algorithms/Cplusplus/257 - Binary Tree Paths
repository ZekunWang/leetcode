/*
Given a binary tree, return all root-to-leaf paths.

For example, given the following binary tree:

   1
 /   \
2     3
 \
  5
All root-to-leaf paths are:

["1->2->5", "1->3"]
*/

#include <iostream>
#include <string>
#include <vector>
using namespace std;

class Solution {
    vector<string> v;
    void solution1(TreeNode *root, int pos);
    void solution2(TreeNode *root, int str);
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        if(!root) return v;
        v.push_back("");
        solution1(root, 0);
        //solution2(root, "");
        return v;
    }
};

void Solution::solution1(TreeNode *root, int pos){
    v[pos] += to_string(root->val);
    if(root->left || root->right){
        v[pos] += "->";
        if(root->left){
            if(root->right){
                v.push_back(v[pos]);
                solution1(root->right, v.size() - 1);
            }
            solution1(root->left, pos);
        }else solution1(root->right, pos);
    }
}

void solution2(TreeNode *node, string str){
    if(node == NULL) return;
    str += to_string(node->val);
    if(node->left == NULL && node->right == NULL){
        v.push_back(str);
        return;
    }
    str += "->";
    if(node->left) solution1(node->left, str);
    if(node->right) solution1(node->right, str);
}
