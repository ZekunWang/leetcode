/*
Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
*/

#include <iostream>
#include <vector>
using namespace std;

class Solution {
    vector<vector<int> > v;
    void solution1(int n, int k);
    void subSol1(int cur, int n, int k, vector<int> &t);
public:
    vector<vector<int>> combine(int n, int k) {
        solution1(n, k);
        return v;
    }
};

void Solution::solution1(int n, int k){
    vector<int> t(k, 0);
    subSol1(1, n, k, t);
}

void Solution::subSol1(int cur, int n, int k, vector<int> &t){
    while(cur <= n - k + 1){
        t[t.size() - k] = cur++;
        if(k > 1) subSol1(cur, n, k - 1, t);
        else v.push_back(t);
    }
}
