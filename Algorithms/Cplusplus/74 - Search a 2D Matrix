/*
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return true.
*/

#include <iostream>
#include <vector>
using namespace std;

class Solution {
    bool solution1(vector<vector<int> > &v, int t);
    int BSVertical(vector<vector<int> > &v, int lo, int hi, int t);
    bool BSHorizontal(vector<int> &tmp, int lo, int hi, int t);
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        return solution1(matrix, target);
    }
};

bool Solution::solution1(vector<vector<int> > &v, int t){
    if(!v.size() || !v[0].size()) return false;
    int row = BSVertical(v, 0, v.size() - 1, t);
    if(row == -1) return false;
    return BSHorizontal(v[row], 0, v[row].size() - 1, t);
}
//Vertical binary search to decide which row to look into for the target
int Solution::BSVertical(vector<vector<int> > &v, int lo, int hi, int t){
    if(lo == hi) return (t <= v[lo].back()) ? lo : -1;
    int mid((lo + hi) / 2);
    if(t > v[mid].back()) return BSVertical(v, mid + 1, hi, t);
    return BSVertical(v, lo, mid, t);
}
//Horizontal binary search to look into the row for the target
bool Solution::BSHorizontal(vector<int> &tmp, int lo, int hi, int t){
    if(lo > hi) return false;
    int mid((lo + hi) / 2);
    if(tmp[mid] < t) return BSHorizontal(tmp, mid + 1, hi, t);
    if(tmp[mid] > t) return BSHorizontal(tmp, lo, mid - 1, t);
    return true;
}
