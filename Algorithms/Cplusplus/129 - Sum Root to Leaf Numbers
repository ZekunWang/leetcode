/*
Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

For example,

    1
   / \
  2   3
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Return the sum = 12 + 13 = 25.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
#include <iostream>
using namespace std;

class Solution {
    void solution1(TreeNode *root, int cnt, int &sum);
public:
    int sumNumbers(TreeNode* root) {
        int sum(0);
        solution1(root, 0, sum);
        return sum;
    }
};

void Solution::solution1(TreeNode *root, int cnt, int &sum){
    if(!root) return;
    cnt = cnt * 10 + root->val;
    solution1(root->left, cnt, sum);
    solution1(root->right, cnt, sum);
    if(!root->left && !root->right) sum += cnt;
}
