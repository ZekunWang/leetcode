/*
Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

#include <iostream>
using namespace std;

class Solution {
    bool solution1(ListNode *head);
public:
    bool hasCycle(ListNode *head) {
        return solution1(head);
    }
};

bool Solution::solution1(ListNode *head){
    if(!head) return false;
    ListNode *fast(head), *slow(head);
    while(fast->next && fast->next->next){
        fast = fast->next->next;
        slow = slow->next;
        if(fast == slow) return true;
    }
    return false;
}
