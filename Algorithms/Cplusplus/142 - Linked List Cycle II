/*
Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Note: Do not modify the linked list.

Follow up:
Can you solve it without using extra space?
*/


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

#include <iostream>
using namespace std;

class Solution {
    ListNode* solution1(ListNode *head);
public:
    ListNode *detectCycle(ListNode *head) {
        return solution1(head);
    }
};

ListNode* Solution::solution1(ListNode *head){
    if(!head) return NULL;
    ListNode *fast(head), *slow(head);
    while(fast->next && fast->next->next){
        fast = fast->next->next;
        slow = slow->next;
        if(fast == slow){
            fast = head;
            while(fast != slow){
                fast = fast->next;
                slow = slow->next;
            }
            return fast;
        }
    }
    return NULL;
}
