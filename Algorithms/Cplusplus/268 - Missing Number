/*
Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

For example,
Given nums = [0, 1, 3] return 2.

Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?
*/

#include <iostream>
#include <vector>
using namespace std;

class Solution {
    int solution1(vector<int> &nums);
    int solution2(vector<int> &nums);
public:
    int missingNumber(vector<int>& nums) {
        //return solution1(nums);
        return solution2(nums);
    }
};

int Solution::solution1(vector<int> &v){
    int sum(v[0]), sz(v.size());
    for(int i = 1; i < sz; i++)
        sum += v[i];
    return (sz + 1) * sz / 2 - sum;
}

int Solution::solution2(vector<int> &v){
    int sz(v.size()), res(sz);
    for(int i = 0; i < sz; i++)
        res ^= v[i] ^ i;
    return res;
}
