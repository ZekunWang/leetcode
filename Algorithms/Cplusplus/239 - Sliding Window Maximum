/*
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the 
very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

For example,
Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Therefore, return the max sliding window as [3,3,5,5,6,7].

Note: 
You may assume k is always valid, ie: 1 ≤ k ≤ input array's size for non-empty array.
Follow up:
Could you solve it in linear time?
Hint:

How about using a data structure such as deque (double-ended queue)?
The queue size need not be the same as the window’s size.
Remove redundant elements and the queue should store only elements that need to be considered.
*/

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        return solution1(nums, k);
    }
private:
    // using Data Structure: Sliding Window Minimum / Monotonic Queue
    vector<int> solution1(vector<int> &v, int k){
        deque<int> dq;
        vector<int> r;
        for(int i = 0; i < v.size(); i++){
            if(!dq.empty() && dq.front() <= i-k) dq.pop_front();    //remove front position to fit in size k
            while(!dq.empty() && v[dq.back()] < v[i]) dq.pop_back();//remove small elements to keep larger one at the front
            dq.push_back(i);
            if(i >= k - 1) r.push_back(v[dq.front()]);  //start picking element when reach k elements
        }
        return r;
    }
};
