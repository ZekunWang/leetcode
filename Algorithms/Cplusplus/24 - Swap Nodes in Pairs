/*
Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
#include <iostream>
using namespace std;

class Solution {
    ListNode *solution1(ListNode *node);
public:
    ListNode* swapPairs(ListNode* head) {
        return solution1(head);
    }
};

ListNode *Solution::solution1(ListNode *node){
    if(!node || !node->next) return node;
    ListNode nhead(0), *pre(&nhead), *cur(node);
    nhead.next = node;
    while(cur && cur->next){
        pre->next = cur->next;
        cur->next = cur->next->next;
        pre->next->next = cur;
        pre = cur;
        cur = cur->next;
    }
    return nhead.next;
}
