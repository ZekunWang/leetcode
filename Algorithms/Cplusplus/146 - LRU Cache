/*
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
set(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate 
the least recently used item before inserting a new item.
*/

class LRUCache{
    class Node {
    public:
        int key;
        int val;
        Node *left;
        Node *right;
        
        Node(int _key, int _val, Node *_left, Node *_right) {
            key = _key;
            val = _val;
            left = _left;
            right = _right;
        }
    };
    
    unordered_map<int, Node *> map;
    Node *sentinel;
    int capacity;
    
    void removeFromTail();
    void removeNode(Node *node);
    void addToHead(Node *node);
public:
    LRUCache(int capacity) {
        this->capacity = capacity;
        sentinel = new Node(0, 0, NULL, NULL);
        sentinel->left = sentinel->right = sentinel;
    }
    
    int get(int key) {
        if (map.find(key) != map.end()) {
            Node *cur = map[key];
            removeNode(cur);
            addToHead(cur);
            return cur->val;
        }
        return -1;
    }
    
    void set(int key, int value) {
        Node *cur = NULL;
        if (map.find(key) == map.end()) {
            if (map.size() == capacity) {
                removeFromTail();
            }
            cur = new Node(key, value, NULL, NULL);
            map[key] = cur;
        } else {
            cur = map[key];
            removeNode(cur);
        }
        cur->val = value;
        addToHead(cur);
    }
};

void LRUCache::removeFromTail() {
    Node *tail = sentinel->left;
    removeNode(tail);
    map.erase(tail->key);
    delete tail;
}

void LRUCache::removeNode(Node *node) {
    node->left->right = node->right;
    node->right->left = node->left;
}

void LRUCache::addToHead(Node *node) {
    sentinel->right->left = node;       // node <- head
    node->right = sentinel->right;      // node -> head
    node->left = sentinel;             // sentinel <- node
    sentinel->right = node;            // sentinel -> node
}
