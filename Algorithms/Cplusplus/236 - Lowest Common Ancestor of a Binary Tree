/*
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v 
and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”

        _______3______
       /              \
    ___5__          ___1__
   /      \        /      \
   6      _2       0       8
         /  \
         7   4
For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 
is 5, since a node can be a descendant of itself according to the LCA definition.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
#include <iostream>
using namespace std;

class Solution {
    TreeNode* solution1(TreeNode *root, TreeNode *p, TreeNode *q);
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root) return NULL;
        if(p == q) return q;
        if(!p) return q;
        if(!q) return p;
        return solution1(root, p, q);
    }
};

TreeNode* Solution::solution1(TreeNode *root, TreeNode *p, TreeNode *q){
    if(!root) return NULL;
    if(root == p || root == q) return root;
    TreeNode *left = solution1(root->left, p, q);
    TreeNode *right = solution1(root->right, p, q);
    if(left && right) return root;
    if(!left && !right) return NULL;
    return left ? left : right;
}
