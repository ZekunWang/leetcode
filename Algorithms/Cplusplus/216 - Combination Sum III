/*
Find all possible combinations of k numbers that add up to a number n, given that only numbers 
from 1 to 9 can be used and each combination should be a unique set of numbers.

Ensure that numbers within the set are sorted in ascending order.

Example 1: 
Input: k = 3, n = 7
Output: [[1,2,4]]

Example 2:
Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]
*/

#include <iostream>
#include <vector>
using namespace std;

class Solution {
    vector<vector<int> > v;
    void solution1(int num, int sum);
    void subSol1(int cur, int num, int sum, vector<int> &t);
    public:
    vector<vector<int>> combinationSum3(int k, int n) {
        solution1(k, n);
        return v;
    }
};

void Solution::solution1(int num, int sum){
    int minSum((1 + num) * num / 2), maxSum((19 - num) * num / 2);
    if(sum < minSum || sum > maxSum) return;    // return if sum is not possible
    vector<int> t(num, 0);
    subSol1(1, num, sum, t);
}

void Solution::subSol1(int cur, int num, int sum, vector<int> &t){
    while(cur <= 9 - num + 1){
        t[t.size() - num] = cur++;
        if(num > 1) subSol1(cur, num - 1, sum - cur + 1, t);    //choose number for next position
        else if(sum == cur - 1) v.push_back(t);    //push to result if remaining sum is equal to last number
    }
}
