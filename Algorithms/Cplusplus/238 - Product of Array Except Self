/*
Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the product of 
all the elements of nums except nums[i].

Solve it without division and in O(n).

For example, given [1,2,3,4], return [24,12,8,6].

Follow up:
Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose 
of space complexity analysis.)
*/

#include <iostream>
#include <vector>
using namespace std;

class Solution {
    vector<int> solution1(vector<int> &n);
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        return solution1(nums);
    }
};

vector<int> Solution::solution1(vector<int> &n){
    vector<int> v(n.size(), 1);
    int left(n[0]), sz(n.size() - 1), right(n[sz]);
    for(int i = 1; i <= sz; i++){
        v[i] *= left;
        left *= n[i];
        v[sz - i] *= right;
        right *= n[sz - i];
    }
    return v;
}
