/*
Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you 
can see ordered from top to bottom.

For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
You should return [1, 3, 4].
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
#include <iostream>
#include <vector>
using namespace std;

class Solution {
    vector<int> v;
    void solution1(TreeNode *root, int cnt);
public:
    vector<int> rightSideView(TreeNode* root) {
        solution1(root, 1);
        return v;
    }
};

void Solution::solution1(TreeNode *root, int cnt){
    if(!root) return;
    if(cnt > v.size()) v.push_back(root->val);
    solution1(root->right, cnt + 1);
    solution1(root->left, cnt + 1);
}
