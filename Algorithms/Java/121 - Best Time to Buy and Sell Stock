/*
Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (ie, buy one and sell one 
share of the stock), design an algorithm to find the maximum profit.
*/

public class Solution {
    public int maxProfit(int[] prices) {
        return solution3(prices);
        //return solution2(prices);
        //return solution1(prices);
    }
    
    /*
        buy[i]: max profit so far if buy from p[0] to p[i]
        sell[i]: max profit so far if sell from p[0] to p[i]
        
        sell[i] = buy[i - 1] + p[i];
        buy[i] = min(buy[i - 1], -p[i])
        
        optimization: space O(2n) -> O(2)
    */
    private int solution3(int[] p) {
        int sell = 0, buy = Integer.MIN_VALUE;
        for (int tp : p) {
            sell = Math.max(sell, buy + tp);
            buy = Math.max(buy, -tp);
        }
        return sell;
    }
    
    /*
        M[i]: max profit when selling at p[i]
        M[i] = p[i] - min(p[k]), k from 0 to i - 1
             = p[i] - tmp
        tmp  = max(tmp, p[i]), for iteration of p[i+1]
    */
    private int solution2(int[] p) {
        if (p == null || p.length < 2) {
            return 0;
        }
        int res = 0, buy = p[0];
        for (int sell = 1; sell < p.length; sell++) {
            res = Math.max(res, p[sell] - buy);
            buy = Math.min(buy, p[sell]);
        }
        return res;
    }
    
    /*
        to make profit, we don't sell until p[i] > p[i - 1]
        max profit: res = max(res, p[i - 1] - min(p[k])), k from 0 to i - 2
                        = max(res, p[i - 1] - buy);
                    buy = min(buy, p[i])
    */
    private int solution1(int[] prices) {
        if (prices == null || prices.length < 2) {
            return 0;
        }
        int res = 0, buy = 0, sell = 1;
        while (sell < prices.length) {
            if (prices[sell] < prices[sell - 1]) {
                res = Math.max(res, prices[sell - 1] - prices[buy]);
                buy = prices[buy] < prices[sell] ? buy : sell;
            }
            sell++;
        }
        res = Math.max(res, prices[sell - 1] - prices[buy]);
        return res;
    }
}
