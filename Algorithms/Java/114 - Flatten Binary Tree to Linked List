/*
Given a binary tree, flatten it to a linked list in-place.

For example,
Given

         1
        / \
       2   5
      / \   \
     3   4   6
The flattened tree should look like:
   1
    \
     2
      \
       3
        \
         4
          \
           5
            \
             6
click to show hints.

Hints:
If you notice carefully in the flattened tree, each node's right child points to the next node of a pre-order traversal.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void flatten(TreeNode root) {
        iteration(root);
        //recursion(root);
    }
    
    private void iteration(TreeNode root) {
        if (root == null) {
            return;
        }
        Deque<TreeNode> stack = new LinkedList<>();
        TreeNode dummy = new TreeNode(0), cur = dummy;
        stack.offerFirst(root);
        while (!stack.isEmpty()) {
            TreeNode nxt = stack.pollFirst();
            if (nxt.right != null) {
                stack.offerFirst(nxt.right);
            }
            if (nxt.left != null) {
                stack.offerFirst(nxt.left);
            }
            cur.right = nxt;
            cur = nxt;
            cur.left = cur.right = null;
        }
    }
    
    private TreeNode recursion(TreeNode root) {
        if (root == null) {
            return null;
        }
        TreeNode left = recursion(root.left);
        TreeNode right = recursion(root.right);
        TreeNode tail = root;
        if (left != null) {
            left.right = root.right;
            root.right = root.left;
            root.left = null;
            tail = left;
        }
        return right != null ? right : tail;
    }
}
