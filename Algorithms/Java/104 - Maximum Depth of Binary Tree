/*
Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int maxDepth(TreeNode root) {
        return recursion(root, 0);
    }
    
    private int recursion(TreeNode root, int dep) {
        if (root == null) {
            return 0;
        } else if (root.left == null && root.right == null) {
            return dep + 1;
        }
        int left = recursion(root.left, dep + 1);   // dep of left subtree
        int right = recursion(root.right, dep + 1); // dep of right subtree
        return Math.max(left, right);
    }
}
