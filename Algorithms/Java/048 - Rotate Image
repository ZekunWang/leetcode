/*
You are given an n x n 2D matrix representing an image.

Rotate the image by 90 degrees (clockwise).

Follow up:
Could you do this in-place?
*/

public class Solution {
    public void rotate(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || 
                matrix[0] == null || matrix[0].length == 0) {
            return;
        }
        recursion(matrix, 0, matrix.length, matrix.length - 1);
        //iteration(matrix);
    }
    
    private void recursion(int[][] matrix, int begin, int len, int last) {
        if (len < 2) {
            return;
        }
        int temp;
        for (int i = 0; i < len - 1; i++) {
            temp = matrix[begin][begin + i];
            matrix[begin][begin + i] = matrix[last - i][begin];
            matrix[last - i][begin] = matrix[last][last - i];
            matrix[last][last - i] = matrix[begin + i][last];
            matrix[begin + i][last] = temp;
        }
        recursion(matrix, begin + 1, len - 2, last - 1);
    }
    
    private void iteration(int[][] matrix) {
        int begin = 0, len = matrix.length, temp;
        while (len > 1) {
            int last = matrix.length - 1 - begin;
            for (int i = 0; i < len - 1; i++) {
                temp = matrix[begin][begin + i];
                matrix[begin][begin + i] = matrix[last - i][begin];
                matrix[last - i][begin] = matrix[last][last - i];
                matrix[last][last - i] = matrix[begin + i][last];
                matrix[begin + i][last] = temp;
            }
            len -= 2;
            begin++;
        }
    }
}
