/*
Find the contiguous subarray within an array (containing at least one number) which has the largest product.

For example, given the array [2,3,-2,4],
the contiguous subarray [2,3] has the largest product = 6.
*/

public class Solution {
    public int maxProduct(int[] nums) {
        //return constantSpaceDP(nums);
        return nSpaceDP(nums);
    }
    /*
        definition: M[0][i] = the max product of contiguous subarray ending at ar[i]
                    M[1][i] = the min product of contiguous subarray ending at ar[i]
        induction rule: M[0][i] = ar[i] * (ar[i] > 0 ? max(M[0][i - 1], 1) : min(M[1][i - 1], 1))
                        M[1][i] = ar[i] * (ar[i] < 0 ? max(M[0][i - 1], 1) : min(M[1][i - 1], 1))
        base case: M[0][0] = M[1][0] = ar[0]
        
        optimization: space O(n) -> O(1)
    */
    private int constantSpaceDP(int[] ar) {
        int mx = ar[0], mn = ar[0];
        int posTmp = 1, negTmp = 1, res = ar[0];
        for (int i = 1; i < ar.length; i++) {
            if (ar[i] > 0) {
                mx = ar[i] * Math.max(mx, 1);
                mn = ar[i] * Math.min(mn, 1);
            } else {
                int temp = mx;
                mx = ar[i] * Math.min(mn, 1);
                mn = ar[i] * Math.max(temp, 1);
            }
            res = Math.max(res, mx);
        }
        return res;
    }
    private int nSpaceDP(int[] ar) {
        int[][] M = new int[2][ar.length];
        M[0][0] = M[1][0] = ar[0];
        int res = ar[0];
        for (int i = 1; i < ar.length; i++) {
            if (ar[i] > 0) {
                M[0][i] = ar[i] * Math.max(M[0][i - 1], 1);
                M[1][i] = ar[i] * Math.min(M[1][i - 1], 1);
            } else {
                M[0][i] = ar[i] * Math.min(M[1][i - 1], 1);
                M[1][i] = ar[i] * Math.max(M[0][i - 1], 1);
            }
            res = Math.max(res, M[0][i]);
        }
        return res;
    }
}
