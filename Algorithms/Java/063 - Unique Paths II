/*
Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

Note: m and n will be at most 100.
*/

/*
    2D input + similar element -> 2D helper
    M[i][j]: num of way from top-left corner to M[i][j]
    M[i][j] = M[i - 1][j] + M[i][j - 1], if m[i][j] == 0
            = 0, otherwise
    optimization: space O(m*n) -> O(n)
*/

public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        return nSpaceDP(obstacleGrid);
        //return mnSpaceDP(obstacleGrid);
    }
    
    private int nSpaceDP(int[][] m) {
        int[] M = new int[m[0].length];
        M[0] = m[0][0] == 1 ? 0 : 1;
        for (int j = 1; j < M.length; j++) {
            M[j] = m[0][j] == 1 ? 0 : M[j - 1];
        }
        for (int i = 1; i < m.length; i++) {
            M[0] = m[i][0] == 1 ? 0 : M[0];
            for (int j = 1; j < M.length; j++) {
                if (m[i][j] == 1) {
                    M[j] = 0;
                } else {
                    M[j] = M[j] + M[j - 1];
                }
            }
        }
        return M[M.length - 1];
    }
    
    private int mnSpaceDP(int[][] m) {
        int[][] M = new int[m.length][m[0].length];
        M[0][0] = m[0][0] == 1 ? 0 : 1;
        for (int j = 1; j < M[0].length; j++) {
            M[0][j] = m[0][j] == 1 ? 0 : M[0][j - 1];
        }
        for (int i = 1; i < M.length; i++) {
            M[i][0] = m[i][0] == 1 ? 0 : M[i - 1][0];
        }
        for (int i = 1; i < M.length; i++) {
            for (int j = 1; j < M[0].length; j++) {
                if (m[i][j] == 1) {
                    M[i][j] = 0;
                } else {
                    M[i][j] = M[i - 1][j] + M[i][j - 1];
                }
            }
        }
        return M[M.length - 1][M[0].length -1];
    }
}
