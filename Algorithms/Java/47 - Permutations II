/*
Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[1,1,2], [1,2,1], and [2,1,1].
*/

import java.util.*;

class Solution {
    private ArrayList<List<Integer>> al;
    public List<List<Integer>> permuteUnique(int[] nums) {
        al = new ArrayList<List<Integer>>();
        if(nums.length == 0) return al;
        solution1(nums);
        return al;
    }
    public void solution1(int[] nums){
        HashSet<Integer> hs = new HashSet<Integer>();
        ArrayList<Integer> tmp = new ArrayList<Integer>();
        tmp.add(nums[0]);
        hs.add(nums[0]);
        al.add(tmp);
        int sz = 1;
        for(int i = 1; i < nums.length; i++){
            int nm = nums[i];
            for(int j = 0, szt = sz; j < szt; j++){
                List<Integer> cur = al.get(j);
                cur.add(nm);
                for(int k = 0, p = cur.size() - 1; k < p; k++){
                    if(cur.get(k) == nm) continue;
                    cur.set(p, cur.get(k));
                    cur.set(k, nm);
                    if(hs.contains(nm)){
                        int l = szt;
                        while(l < sz && !compare(cur, al.get(l))) l++;
                        if(l == sz){
                            al.add(new ArrayList(cur));
                            sz++;
                        }
                    }else{
                        al.add(new ArrayList(cur));
                        hs.add(nm);
                        sz++;
                    }
                    cur.set(k, cur.get(p));
                    cur.set(p, nm);
                }
            }
        }
    }
    public boolean compare(List<Integer> a, List<Integer> b){
        for(int i = 0; i < a.size(); i++)
            if(a.get(i) != b.get(i)) return false;
        return true;
    }
}
