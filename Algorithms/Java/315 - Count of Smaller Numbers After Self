/*
You are given an integer array nums and you have to return a new counts array. 
The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].

Example:
Given nums = [5, 2, 6, 1]

To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.
Return the array [2, 1, 1, 0].
*/

public class Solution {
    public List<Integer> countSmaller(int[] nums) {
        List<Integer> list = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return list;
        }
        withBST(nums, list);
        //withMergeSort(nums, list);
        return list;
    }
    /*
        traverse backward, search and add the num to a BST, keeping track of num of nodes in left subtree
        time: O(n*logn) best, O(n^2) worst, space: O(n) for BST
    */
    private void withBST(int[] nums, List<Integer> list) {
        TreeNode root = new TreeNode(nums[nums.length - 1]);
        root.num = 0;
        list.add(0);
        for (int i = nums.length - 2; i >= 0; i--) {
            list.add(addNode(root, nums[i], 0));
        }
        Collections.reverse(list);
    }
    
    private int addNode(TreeNode root, int val, int num) {
        TreeNode node = new TreeNode(val);
        node.num = 0;
        while (root != null) {
            if (root.val >= val) {
                root.num++;
                if (root.left != null) {
                    root = root.left;
                } else {
                    root.left = node;
                    return num;
                }
            } else {
                num += root.num + 1;
                if (root.right != null) {
                    root = root.right;
                } else {
                    root.right = node;
                    return num;
                }
            }
        }
        return 0;
    }
    
    private class TreeNode {
        int val, num;
        TreeNode left, right;
        public TreeNode(int val) {
            this.val = val;
        }
    }
    
    /*
        sort index[] and count num of right subarray, count[] += counter when pick from left subarray
        time: O(n*logn), space: O(3n) = O(n)
    */
    private void withMergeSort(int[] nums, List<Integer> list) {
        int[] index = new int[nums.length];
        int[] count = new int[nums.length];
        int[] temp = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            index[i] = i;
        }
        mergeSort(index, 0, nums.length - 1, temp, count, nums);
        for (int num : count) {
            list.add(num);
        }
    }
    
    private void mergeSort(int[] index, int left, int right, int[] temp, int[] count, int[] nums) {
        if (left >= right) {
            return;
        }
        int mid = left + (right - left) / 2;
        mergeSort(index, left, mid, temp, count, nums);
        mergeSort(index, mid + 1, right, temp, count, nums);
        merge(index, left, mid, right, temp, count, nums);
    }
    
    private void merge(int[] index, int left, int mid, int right, int[] temp, int[] count, int[] nums) {
        int curTotal = left, curLeft = left, curRight = mid + 1, counter = 0;
        // copy subarray to temp array
        for (int i = left; i <= right; i++) {
            temp[i] = index[i];
        }
        // merge subarray to index array, counting num of num from right subarray
        while (curLeft <= mid && curRight <= right) {
            if (nums[temp[curLeft]] <= nums[temp[curRight]]) {
                index[curTotal++] = temp[curLeft];
                count[temp[curLeft++]] += counter;
            } else {
                index[curTotal++] = temp[curRight++];
                counter++;
            }
        }
        while (curLeft <= mid) {
            index[curTotal++] = temp[curLeft];
            count[temp[curLeft++]] += counter;
        }
        while (curRight <= right) {
            index[curTotal++] = temp[curRight++];
        }
    }
}
