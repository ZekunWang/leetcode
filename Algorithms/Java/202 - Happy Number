/*
Write an algorithm to determine if a number is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, 
replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 
(where it will stay), or it loops endlessly in a cycle which does not include 1. 
Those numbers for which this process ends in 1 are happy numbers.

Example: 19 is a happy number

1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1
*/

public class Solution {
    public boolean isHappy(int n) {
        //return constantSpace(n);
        return linearSpace(n);
    }
    
    private boolean linearSpace(int n) {
        Set<Integer> set = new HashSet<>();
        while (set.add(n)) {
            if (n == 1) {
                return true;
            }
            n = cal(n);
        }
        return false;
    }
        
    private boolean constantSpace(int n) {
        int fast = n, slow = n;
        while (slow > 1) {
            slow = cal(slow);
            if (slow == 1) {
                return true;
            }
            fast = cal(cal(fast));
            if (fast == 1) {
                return true;
            }
            if (fast == slow) {
                return false;
            }
        }
        return true;
    }
    
    private int cal(int n){
        int x = n;
        int s = 0;
        while(x>0){
            s = s+(x%10)*(x%10);
            x = x/10;
        }
        return s ;
    }
}
