/*
Given a string s and a dictionary of words dict, determine if s can be segmented into a 
space-separated sequence of one or more dictionary words.

For example, given
s = "leetcode",
dict = ["leet", "code"].

Return true because "leetcode" can be segmented as "leet code".
*/

/*
    M[i]: if substring of 0-th to i-th char is breakable or not
    M[i] = M[k] && subString(k + 1, i) is valid, k from 0 to i - 1 OR subString(0, i) is valid
*/

public class Solution {
    public boolean wordBreak(String s, Set<String> wordDict) {
        if (s == null) {
            return false;
        }
        return solution1(s, wordDict);
    }
    
    private boolean solution1(String s, Set<String> wordDict) {
        StringBuilder sb = null;
        boolean[] M = new boolean[s.length()];
        int len = 0;
        for (String str : wordDict) {
            len = Math.max(len, str.length());
        }
        for (int i = s.length() - 1; i >= 0; i--) {
            sb = new StringBuilder();
            int j = i + 1;
            int bound = Math.max(s.length(), i + len);
            while (j < s.length()) {
                sb.append(s.charAt(j - 1));
                if (M[j] && wordDict.contains(sb.toString())) {
                    M[i] = true;
                    break;
                }
                j++;
            }
            if (!M[i] && j == s.length()) {
                if (wordDict.contains(sb.append(s.charAt(j - 1)).toString())) {
                    M[i] = true;
                }
            }
        }
        return M[0];
    }
}
