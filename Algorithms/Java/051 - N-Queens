/*
The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' 
both indicate a queen and an empty space respectively.

For example,
There exist two distinct solutions to the 4-queens puzzle:
[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
*/

public class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> list = new ArrayList<>();
        boolean[] col = new boolean[n];
        boolean[] dgn1 = new boolean[2 * n];
        boolean[] dgn2 = new boolean[2 * n];
        recursion(new int[n], 0, n, list, col, dgn1, dgn2);
        return list;
    }
    
    private void recursion(int[] tmp, int row, int n, List<List<String>> list, 
            boolean[] col, boolean[] dgn1, boolean[] dgn2) {
        if (row == n) {
            list.add(new ArrayList<String>());
            List<String> cur = list.get(list.size() - 1);
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < n; i++) {
                sb.append('.');
            }
            for (int num : tmp) {
                sb.setCharAt(num, 'Q');
                cur.add(sb.toString());
                sb.setCharAt(num, '.');
            }
            return;
        }
        for (int i = 0; i < n; i++) {
            int d1 = i - row + n, d2 = i + row;
            if (!col[i] && !dgn1[d1] && !dgn2[d2]) {
                col[i] = dgn1[d1] = dgn2[d2] = true;
                tmp[row] = i;
                recursion(tmp, row + 1, n, list, col, dgn1, dgn2);
                col[i] = dgn1[d1] = dgn2[d2] = false;
            }
        }
    }
}
