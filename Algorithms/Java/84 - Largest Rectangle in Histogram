/*
Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, 
find the area of largest rectangle in the histogram.

Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].

The largest rectangle is shown in the shaded area, which has area = 10 unit.

For example,
Given heights = [2,1,5,6,2,3],
return 10.
*/


public class Solution {
    public int largestRectangleArea(int[] heights) {
    return solution1(heights);
    //return solution2(heights);
  }
  
  private int solution2(int[] array) {
    LinkedList<Integer> stack = new LinkedList<>();
    int largest = 0;
    for (int i = 0; i <= array.length; i++) {
      int cur = i < array.length ? array[i] : 0;
      while (!stack.isEmpty() && array[stack.peek()] >= cur) {
        int height = array[stack.pop()];
        int left = stack.isEmpty() ? 0 : (stack.peek() + 1);
        largest = Math.max(largest, height * (i - left));
      }
      stack.push(i);
    }
    return largest;
  }
  
  private int solution1(int[] array) {
    int largest = 0;
    for (int i = 0; i < array.length; i++) {
      int left = i, right = i, height = array[i];
      while (left > 0 && array[left - 1] >= height) {
        left--;
      }
      while (right < array.length - 1 && array[right + 1] >= height) {
        right++;
      }
      largest = Math.max(largest, (right - left + 1) * height);
    }
    return largest;
  }
}
