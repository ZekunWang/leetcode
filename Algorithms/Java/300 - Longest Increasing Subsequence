/*
Given an unsorted array of integers, find the length of longest increasing subsequence.

For example,
Given [10, 9, 2, 5, 3, 7, 101, 18],
The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. 
Note that there may be more than one LIS combination, it is only necessary for you to return the length.

Your algorithm should run in O(n2) complexity.
Follow up: Could you improve it to O(n log n) time complexity?
*/

public class Solution {
    public int lengthOfLIS(int[] nums) {
        if (nums == null || nums.length < 1) {
            return 0;
        }
        return nlognDP(nums);
        //return nnDP(nums);
    }
    /*
        M[i] caches all longest increasing subsequences, for a new element, do binary search to find min number that is <= element, replace the number, and from 0 to that number is the longest increasing subsequences ending at the element
    */
    private int nlognDP(int[] nums) {
        int[] M = new int[nums.length];
        int max = 1, tail = 0;
        for (int num : nums) {
            int left = 0, right = tail, mid;
            while (left < right) {
                mid = left + (right - left) / 2;
                if (M[mid] >= num) {
                    right = mid;
                } else {
                    left = mid + 1;
                }
            }
            M[right] = num;
            // update tail index
            tail = Math.max(tail, right + 1);
            // update max
            max = Math.max(max, right + 1);
        }
        return max;
    }
    
    /*
        M[i]: longest insreasing subsequence ending at i-th element
        M[i] = max(M[k] + 1), if nums[i] > nums[k], k from 0 to i - 1
             = 1, otherise
    */
    private int nnDP(int[] nums) {
        int[] M = new int[nums.length];
        int max = 1;
        for (int i = 0; i < nums.length; i++) {
            M[i] = 1;
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    M[i] = Math.max(M[i], M[j] + 1);
                }
                max = Math.max(max, M[i]);
            }
        }
        return max;
    }
}
