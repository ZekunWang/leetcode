/*
Given a string, find the length of the longest substring without repeating characters.

Examples:

Given "abcabcbb", the answer is "abc", which the length is 3.
Given "bbbbb", the answer is "b", with the length of 1.
Given "pwwkew", the answer is "wke", with the length of 3. Note that the answer must be a substring, 
"pwke" is a subsequence and not a substring.
*/

public class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        //return usingMap(s);
        return usingSet(s);
    }
    
    private int usingMap(String s) {
        Map<Character, Integer> map = new HashMap<>();
        int i = 0, j = 0, res = 0;
        while (j < s.length()) {
            char head = s.charAt(j);
            Integer idx = map.get(head);
            if (idx != null) {
                res = Math.max(res, j - i);
                while (i < idx) {
                    map.remove(s.charAt(i++));
                }
                i++;
            }
            map.put(head, j++);
        }
        res = Math.max(res, j - i);
        return res;
    }
    
    private int usingSet(String s) {
        Set<Character> set = new HashSet<>();
        int i = 0, j = 0, res = 0;
        while (j < s.length()) {
            char head = s.charAt(j);
            if (!set.add(head)) {
                res = Math.max(res, j - i);
                while (i < j && s.charAt(i) != head) {
                    set.remove(s.charAt(i++));
                }
                i++;
            }
            j++;
        }
        res = Math.max(res, j - i);
        return res;
    }
}
