/*
Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if (m == n) {
            return head;
        }
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy, subHead, left, right;
        dummy.next = head;
        while (--m > 0 && --n > 0) {
            tail = tail.next;
        }
        left = tail;
        subHead = left.next;
        while (n-- > 0) {
            tail = tail.next;
        }
        right = tail.next;
        tail.next = null;
        left.next = reverse(subHead);
        subHead.next = right;
        return dummy.next;
    }
    
    private ListNode reverse(ListNode node) {
        ListNode newHead = null, tmp;
        while (node != null) {
            tmp = node.next;
            node.next = newHead;
            newHead = node;
            node = tmp;
        }
        return newHead;
    }
}
