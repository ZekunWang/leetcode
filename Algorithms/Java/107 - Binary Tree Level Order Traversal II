/*
Given a binary tree, return the bottom-up level order traversal of its nodes' values. 
(ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        levelOrder(root, list);
        reverse(list);
        return list;
    }
    
    private void levelOrder(TreeNode root, List<List<Integer>> list) {
        if (root == null) {
            return;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            list.add(new ArrayList<Integer>());
            List<Integer> newList = list.get(list.size() - 1);
            for (int i = queue.size(); i > 0; i--) {
                TreeNode node = queue.poll();
                newList.add(node.val);
                if (node.left != null) {
                    queue.offer(node.left);
                }
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }
        }
    }
    
    private void reverse(List<List<Integer>> list) {
        if (list == null) {
            return;
        }
        int i = 0, j = list.size() - 1;
        List<Integer> tmp = null;
        while (i < j) {
            tmp = list.get(i);
            list.set(i++, list.get(j));
            list.set(j--, tmp);
        }
    }
}
