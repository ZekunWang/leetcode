/*
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
set(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate 
the least recently used item before inserting a new item.
*/

public class LRUCache {
    Map<Integer, Node> map;
    Node sentinel;
    int limit;
    
    public LRUCache(int capacity) {
        this.limit = capacity;
        map = new HashMap<>();
        sentinel = new Node(0, 0, null, null);
        sentinel.left = sentinel.right = sentinel;
    }
    
    public int get(int key) {
        Node cur = map.get(key);
        if (cur != null) {
            remove(cur);
            addToHead(cur);
            return cur.val;
        }
        return -1;
    }
    
    public void set(int key, int value) {
        Node cur = map.get(key);
        if (cur == null) {    // add new node
            cur = new Node(key, value, null, null);
            if (map.size() == limit) {  // check if cache is full
                deleteFromTail();   // delete tail if cache is full
            }
            map.put(key, cur);
        } else {
            remove(cur);
        }
        cur.val = value;
        addToHead(cur);
    }
  
    private void deleteFromTail() {     // remove LRU node from cache
        Node tail = sentinel.left;
        remove(tail);
        map.remove(tail.key);
    }
  
    private void remove(Node node) {    // remove node from cache
        node.left.right = node.right;
        node.right.left = node.left;
    }
  
    private void addToHead(Node node) {
        sentinel.right.left = node;       // node <- head
        node.right = sentinel.right;      // node -> head
        node.left = sentinel;             // sentinel <- node
        sentinel.right = node;            // sentinel -> node
    }
  
    public class Node {
        public int key;
        public int val;
        public Node left;
        public Node right;
    
        public Node(int key, int val, Node left, Node right) {
            this.key = key;
            this.val = val;
            this.left = left;
            this.right = right;
        }
    }
}
