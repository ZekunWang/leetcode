/*
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
set(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate 
the least recently used item before inserting a new item.
*/

class ListNode {
    public int key;
    public int val;
    public ListNode next;
    public ListNode prev;
    
    public ListNode(int key, int val) {
        this.key = key;
        this.val = val;
    }
}

public class LRUCache {
    ListNode head;
    ListNode tail;
    Map<Integer, ListNode> map;
    int cap;
    
    public LRUCache(int capacity) {
        cap = capacity;
        head = new ListNode(0, 0);
        tail = new ListNode(0, 0);
        head.next = tail;
        tail.prev = head;
        map = new HashMap<>();
    }
    
    public int get(int key) {
        ListNode node = map.get(key);
        if (node == null) {
            return -1;
        }
        refresh(node);
        return node.val;
    }
    
    public void set(int key, int value) {
        ListNode node = map.get(key);
        if (node == null) { // node not exists
            if (map.size() == cap) {    // cache full, remove tailing data node
                map.remove(tail.prev.key);
                del(tail.prev);
            }
            node = new ListNode(key, value);
            map.put(key, node);
            add(node);
        } else {    // node exists
            node.val = value;
            refresh(node);
        }
    }
    // cache hit, refresh node
    private void refresh(ListNode node) {
        if (map.size() > 1) {
            del(node);  // delete from current pos
            add(node);  // update to head of list
        }
    }
    // add from head
    private void add(ListNode node) {
        node.next = head.next;
        node.next.prev = node;
        
        head.next = node;
        node.prev = head;
    }
    // delete list
    private void del(ListNode node) {
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
}
