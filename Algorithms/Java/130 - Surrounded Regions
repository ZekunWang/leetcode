/*
Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

For example,
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X
*/

public class Solution {
    public void solve(char[][] board) {
        if (board == null || board.length == 0 || 
                board[0] == null || board[0].length == 0) {
            return;
        }
        // look for 'O's from edges, set to 'V'
        int lastRow = board.length - 1, lastCol = board[0].length - 1;
        for (int i = 0; i < board.length; i++) {
            if (board[i][0] == 'O') {
                recursion1(board, i, 0);
            }
            if (board[i][lastCol] == 'O') {
                recursion1(board, i, lastCol);
            }
        }
        for (int j = 0; j < board[0].length; j++) {
            if (board[0][j] == 'O') {
                recursion1(board, 0, j);
            }
            if (board[lastRow][j] == 'O') {
                recursion1(board, lastRow, j);
            }
        }
        
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == 'V') {
                    board[i][j] = 'O';
                } else if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
            }
        }
    }
    
    private void recursion(char[][] board, int row, int col) {
        if (row < 0 || row >= board.length || 
                col < 0 || col >= board[0].length) {
            return;
        } else if (board[row][col] != 'O') {
            return;
        }
        
        board[row][col] = 'V';
        recursion(board, row + 1, col);
        recursion(board, row - 1, col);
        recursion(board, row, col + 1);
        recursion(board, row, col - 1);
    }
    
    private void recursion1(char[][] board, int row, int col) {
        board[row][col] = 'V';
        if (row < board.length - 2 && board[row + 1][col] == 'O') {
            recursion1(board, row + 1, col);
        }
        if (row > 1 && board[row - 1][col] == 'O') {
            recursion1(board, row - 1, col);
        }
        if (col < board[0].length - 2 && board[row][col + 1] == 'O') {
            recursion1(board, row, col + 1);
        }
        if (col > 1 && board[row][col - 1] == 'O') {
            recursion1(board, row, col - 1);
        }
    }
}
