/*
Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.
Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        //return iteration(head);
        return recursion(head);
    }
    
    private ListNode iteration(ListNode head) {
        ListNode dummy = new ListNode(0), cur = dummy;
        ListNode next, nnext;
        cur.next = head;
        while (head != null && head.next != null) {
            next = head.next;
            nnext = next.next;
            
            next.next = head;
            head.next = nnext;
            
            cur.next = next;
            cur = head;
            head = nnext;
        }
        return dummy.next;
    }
    
    private ListNode recursion(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode next = head.next;
        ListNode nnext = recursion(next.next);
        next.next = head;
        head.next = nnext;
        return next;
    }
}
