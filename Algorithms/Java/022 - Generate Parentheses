/*
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:
[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
*/

public class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> list = new ArrayList<>();
        if (n < 0) {
            return list;
        }
        recursion(new StringBuilder(), n, 0, list);
        return list;
    }
    
    private void recursion(StringBuilder sb, int left, int right, List<String> list) {
        if (right == 0 && left == 0) {
            list.add(sb.toString());
            return;
        }
        if (left > 0) {
            recursion(sb.append('('), left - 1, right + 1, list);
            sb.deleteCharAt(sb.length() - 1);
        }
        if (right > 0) {
            recursion(sb.append(')'), left, right - 1, list);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}
