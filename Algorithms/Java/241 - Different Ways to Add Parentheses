/*
Given a string of numbers and operators, return all possible results from computing all the different possible ways 
to group numbers and operators. The valid operators are +, - and *.

Example 1
Input: "2-1-1".

((2-1)-1) = 0
(2-(1-1)) = 2
Output: [0, 2]

Example 2
Input: "2*3-4*5"

(2*(3-(4*5))) = -34
((2*3)-(4*5)) = -14
((2*(3-4))*5) = -10
(2*((3-4)*5)) = -10
(((2*3)-4)*5) = 10
Output: [-34, -14, -10, -10, 10]
*/

public class Solution {
    public List<Integer> diffWaysToCompute(String input) {
        List<Integer> list = new ArrayList<>();
        if (input == null || input.length() == 0) {
            return list;
        }
        Deque<Integer> numbers = new LinkedList<>();
        Deque<Character> signs = new LinkedList<>();
        int[] pos = new int[]{0};
        numbers.offerFirst(getNumber(input, pos));
        recursion(pos, input, numbers, signs, list);
        return list;
    }
    
    private void recursion(int[] pos, String s, 
            Deque<Integer> numbers, Deque<Character> signs, List<Integer> list) {
        if (signs.size() == 0 && pos[0] >= s.length()) {
            list.add(numbers.peekFirst());
            return;
        }
        int prevPosition = pos[0], n1, n2;
        char sign;
        // state to calculate
        if (signs.size() != 0) {
            n2 = numbers.pollFirst();
            sign = signs.pollFirst();
            n1 = numbers.pollFirst();
            numbers.offerFirst(calculate(n1, sign, n2));
            recursion(pos, s, numbers, signs, list);
            numbers.pollFirst();
            numbers.offerFirst(n1);
            numbers.offerFirst(n2);
            signs.offerFirst(sign);
            pos[0] = prevPosition;
        }
        // state to continue
        if (pos[0] < s.length()) {
            signs.offerFirst(s.charAt(pos[0]++));   // add a sign
            numbers.offerFirst(getNumber(s, pos));   // add a number
            prevPosition = pos[0];
            
            recursion(pos, s, numbers, signs, list);
            pos[0] = prevPosition;
            n2 = numbers.pollFirst();
            sign = signs.pollFirst();
        }
    }
    
    private int getNumber(String s, int[] pos) {
        int res = 0;
        while (pos[0] < s.length()) {
            char ch = s.charAt(pos[0]);
            if (ch < '0' || ch > '9') {
                break;
            }
            res = res * 10 + ch - '0';
            pos[0]++;
        }
        return res;
    }
    
    private int calculate(int n1, char sign, int n2) {
        int res = 0;
        switch(sign) {
            case '+': res = n1 + n2;
                      break;
            case '-': res = n1 - n2;
                      break;
            case '*': res = n1 * n2;
                      break;
        }
        return res;
    }
}
