/*
Given a non-empty array of integers, return the k most frequent elements.

For example,
Given [1,1,1,2,2,3] and k = 2, return [1,2].

Note: 
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
*/

public class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        List<Integer> list = new ArrayList<>();
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {  // O(n)
            Integer count = map.get(num);
            if (count == null) {
                map.put(num, 1);
            } else {
                map.put(num, count + 1);
            }
        }
        withBucketSort(nums, map, k, list);
        //withMinHeap(nums, map, k, list);
        return list;
    }
    
    // O(n) + O(n + n) = O(n)
    private void withBucketSort(int[] nums, Map<Integer, Integer> map, int k, List<Integer> list) {
        List<Integer>[] bucket = new List[nums.length + 1];
        for (int key : map.keySet()) {
            int value = map.get(key);
            if (bucket[value] == null) {
                bucket[value] = new ArrayList<Integer>();
            }
            bucket[value].add(key);
        }
        for (int i = bucket.length - 1; i >= 0 && list.size() < k; i--) {
            if (bucket[i] != null) {
                list.addAll(bucket[i]);
            }
        }
    }
    
    // O(n) + O(n logk + n) = O(n logk)
    private void withMinHeap(int[] nums, Map<Integer, Integer> map, int k, List<Integer> list) {
        PriorityQueue<Map.Entry<Integer, Integer>> pq = 
                new PriorityQueue<>(k, new Comparator<Map.Entry<Integer, Integer>>() {
            @Override
            public int compare(Map.Entry<Integer, Integer> en1, Map.Entry<Integer, Integer> en2) {
                if (en1.getValue().equals(en2.getValue())) {
                    return en2.getKey().compareTo(en1.getKey());
                } else {
                    return en1.getValue().compareTo(en2.getValue());
                }
            }
        });
        for (Map.Entry<Integer, Integer> en : map.entrySet()) {
            if (pq.size() < k) {
                pq.offer(en);
            } else if (pq.peek().getValue() < en.getValue()){
                pq.poll();
                pq.offer(en);
            }
        }
        while (!pq.isEmpty()) {
            list.add(pq.poll().getKey());
        }
    }
}
