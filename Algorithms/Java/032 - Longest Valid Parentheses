/*
Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

For "(()", the longest valid parentheses substring is "()", which has length = 2.

Another example is ")()())", where the longest valid parentheses substring is "()()", which has length = 4.
*/

public class Solution {
    public int longestValidParentheses(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        return linearDP(s);
    }
    
    /*
        M[i]: longest valid parentheses ending at i-th char
        M[i] = M[i - 1] + 2 + M[i - M[i - 1] - 2], if s[i] > s[i - M[i - 1] - 1]
             = 0, if s[i] <= s[i - M[i - 1] - 1]
    */
    private int linearDP(String s) {
        int max = 0;
        int[] M = new int[s.length()];
        for (int i = 1; i < s.length(); i++) {
            int tmp = i - M[i - 1] - 1;
            if (tmp >= 0 && s.charAt(i) > s.charAt(tmp)) {
                M[i] = M[i - 1] + 2;
                if (tmp >= 1) {
                    M[i] += M[tmp - 1];
                }
                max = Math.max(max, M[i]);
            }
        }
        return max;
    }
}
