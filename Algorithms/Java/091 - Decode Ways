/*
A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it.

For example,
Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).

The number of ways decoding "12" is 2.
*/

public class Solution {
    public int numDecodings(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        //return nSpaceDP(s);
        return constantSpaceDP(s);
    }
    
    /*
        definition: M[i] represent max num of ways decoding 0-th to i-th substring
        induction rule: M[i] = 0: M[i] = M[i - 1] if s[i - 2] = 1,2
                                       = 0, if s[i - 1] >= 3
                        M[i] = 1~6: M[i] = M[i - 2] + M[i - 1] if s[i - 1] = 1,2
                                         = M[i - 1] if s[i - 1] > 2
                        M[i] = 7~9: M[i] = M[i - 2] + M[i - 1] if s[i - 1] = 1
                                         = M[i - 1] if s[i - 1] > 1
        base case: M[0] = M[1] = 1, calculate M[i] from s[i - 1]
        complexity: O(n) time, O(n) space
        optimization: space O(n) -> O(2) = O(1)
    */
    private int nSpaceDP(String s) {
        if (s.charAt(0) == '0') {
            return 0;
        }
        int[] M = new int[s.length() + 1];
        M[0] = M[1] = 1;
        for (int i = 2; i < M.length; i++) {
            int cur = s.charAt(i - 1) - '0';
            int pre = s.charAt(i - 2) - '0';
            if (cur == 0) {
                if (pre == 1 || pre == 2) {
                    M[i] = M[i - 2];
                } else {
                    return 0;
                }
            } else if (pre == 1 || (pre == 2 && cur < 7)) {
                M[i] = M[i - 1] + M[i - 2];
            } else {
                M[i] = M[i - 1];
            }
        }
        return M[s.length()];
    }
    
    private int constantSpaceDP(String s) {
        if (s.charAt(0) == '0') {
            return 0;
        }
        int preCount = 1, curCount = 1, tmp;
        for (int i = 2; i <= s.length(); i++) {
            int cur = s.charAt(i - 1) - '0';
            int pre = s.charAt(i - 2) - '0';
            tmp = curCount;
            if (cur == 0) {
                if (i >= 2 && (pre == 1 || pre == 2)) {
                    curCount = preCount;
                } else {
                    return 0;
                }
            } else if (pre == 1 || (pre == 2 && cur < 7)) {
                curCount += preCount;
            }
            preCount = tmp;
        }
        return curCount;
    }
}
