/*
Given two words (beginWord and endWord), and a dictionary's word list, find 
the length of shortest transformation sequence from beginWord to endWord, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the word list
For example,

Given:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

Note:
Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
*/

import java.util.*;

public class Solution {
    public int ladderLength(String start, String end, Set<String> dict) {
        if(start.length() != end.length()) return 0;
        return solution1(start, end, dict);
    }
    public int solution1(String s, String e, Set<String> d){
        d.add(e);
        LinkedList<String> ll = new LinkedList<String>();
        search(s, d, ll);
        int res = 2;
        while(!ll.isEmpty()){
            for(int i = 0, sz = ll.size(); i < sz; i++){
                String tmp = ll.poll();
                if(tmp.equals(e)) return res;
                search(tmp, d, ll);
            }
            res++;
        }
        return 0;
    }
    public void search(String cur, Set<String> d, LinkedList<String> ll){
        d.remove(cur);
        StringBuilder sb = new StringBuilder(cur);
        for(int i = 0; i < sb.length(); i++){
            char ch = sb.charAt(i);
            for(int j = 0; j < 26; j++){
                sb.setCharAt(i, (char)('a' + j));
                String tmp = sb.toString();
                if(d.contains(tmp)){
                    ll.add(tmp);
                    d.remove(tmp);
                }
            }
            sb.setCharAt(i, ch);
        }
    }
}
