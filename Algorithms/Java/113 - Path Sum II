/*
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> list = new ArrayList<>();
        if (root != null) {
            recursion(new ArrayList<Integer>(), root, sum, list);
        }
        return list;
    }
    
    private void recursion(List<Integer> tmp, TreeNode root, 
            int sum, List<List<Integer>> list) {
        if (root == null) {
            return;
        } else if (root.left == null && root.right == null) {  // leaf node
            if (sum == root.val) {
                tmp.add(root.val);
                list.add(new ArrayList<Integer>(tmp));
                tmp.remove(tmp.size() - 1);
            }
            return;
        }
        tmp.add(root.val);  // add state of current layer
        sum -= root.val;  // add state of current layer
        recursion(tmp, root.left, sum, list);
        recursion(tmp, root.right, sum, list);
        tmp.remove(tmp.size() - 1);  // remove state of current layer
    }
}
