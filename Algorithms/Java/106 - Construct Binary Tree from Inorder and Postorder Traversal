/*
Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        return solution1(inorder, 0, inorder.length - 1, postorder, 0, postorder.length - 1);
    }
    public TreeNode solution1(int[] in, int lin, int rin, int[] po, int lpo, int rpo){
        if(lin > rin) return null;
        if(lin == rin) return new TreeNode(po[rpo]);
        int pos = lin, tg = po[rpo];
        TreeNode node = new TreeNode(tg);
        while(in[pos] != tg) pos++;
        int cnt = rin - pos;
        node.right = solution1(in, pos + 1, rin, po, rpo - cnt, rpo - 1);
        node.left = solution1(in, lin, pos - 1, po, lpo, rpo - cnt - 1);
        return node;
    }
}
