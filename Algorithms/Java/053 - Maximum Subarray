/*
Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [−2,1,−3,4,−1,2,1,−5,4],
the contiguous subarray [4,−1,2,1] has the largest sum = 6.

More practice:
If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
*/

public class Solution {
    public int maxSubArray(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        //return nSpaceDP(nums);
        return constantSpaceDP(nums);
    }
    
    private int constantSpaceDP(int[] ar) {
        int max = ar[0], sum = ar[0];
        for (int i = 1; i < ar.length; i++) {
            sum = ar[i] + Math.max(sum, 0);
            max = Math.max(max, sum);
        }
        return max;
    }
    
    private int nSpaceDP(int[] ar) {
        int[] M = new int[ar.length];
        int max = ar[0];
        M[0] = ar[0];
        for (int i = 1; i < ar.length; i++) {
            M[i] = ar[i] + Math.max(M[i - 1], 0);
            max = Math.max(max, M[i]);
        }
        return max;
    }
}
