/*
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. 
The algorithm should run in linear time and in O(1) space.

Hint:
How many majority elements could it possibly have?
*/

public class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> list = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return list;
        }
        int num1 = 0, cnt1 = 0;
        int num2 = 0, cnt2 = 0;
        for (int n : nums) {
            if (n == num1) {
                cnt1++;
            } else if (n == num2) {
                cnt2++;
            } else {
                if (cnt1 == 0) {
                    num1 = n;
                    cnt1 = 1;
                } else if (cnt2 == 0) {
                    num2 = n;
                    cnt2 = 1;
                } else {
                    cnt1--;
                    cnt2--;
                }
            }
        }
        cnt1 = cnt2 = 0;
        for (int n : nums) {
            if (num1 == n) {
                cnt1++;
            } else if (num2 == n) {
                cnt2++;
            }
        }
        if (cnt1 * 3 > nums.length) {
            list.add(num1);
        }
        if (cnt2 * 3 > nums.length) {
            list.add(num2);
        }
        return list;
    }
}
