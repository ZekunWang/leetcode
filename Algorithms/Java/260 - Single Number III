/*
Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice.
Find the two elements that appear only once.

For example:
Given nums = [1, 2, 1, 3, 2, 5], return [3, 5].

Note:
The order of the result is not important. So in the above example, [5, 3] is also correct.
Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?
*/

public class Solution {
    public int[] singleNumber(int[] nums) {
        if (nums == null || nums.length < 2) {
            return null;
        }
        int mask = 0;
        // get xor of tg1 and tg2
        for (int num : nums) {
            mask ^= num;
        }
        // get the mask bit '1' to distinguish tg1 and tg2
        mask &= -mask;  // get right-most '1' bit
        // seperate nums by mask bit
        int[] result = new int[]{0, 0};
        for (int num : nums) {
            if ((num & mask) == 0) {
                result[0] ^= num;
            } else {
                result[1] ^= num;
            }
        }
        return result;
    }
}
