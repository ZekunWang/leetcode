/*
Given a binary tree, return the inorder traversal of its nodes' values.

For example:
Given binary tree [1,null,2,3],
   1
    \
     2
    /
   3
return [1,3,2].

Note: Recursive solution is trivial, could you do it iteratively?
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if (root == null) {
            return list;
        }
        iteration(root, list);
        //recursion(root, list);
        return list;
    }
    
    private void iteration(TreeNode root, List<Integer> list) {
        if (root == null) {
            return;
        }
        Deque<TreeNode> stack = new LinkedList<>();
        stack.offerFirst(root);
        TreeNode cur, pre = null;
        while (!stack.isEmpty()) {
            cur = stack.pollFirst();
            if (pre == null || pre.left == cur || pre.right == cur) {
                if (cur.right != null) {
                    stack.offerFirst(cur.right);
                }
                stack.offerFirst(cur);
                if (cur.left != null) {
                    stack.offerFirst(cur.left);
                }
            } else {
                list.add(cur.val);
            }
            pre = cur;
        }
    }
    
    private void recursion(TreeNode root, List<Integer> list) {
        if (root == null) {
            return;
        }
        recursion(root.left, list);
        list.add(root.val);
        recursion(root.right, list);
    }
}
