/*
Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[1,1,2], [1,2,1], and [2,1,1].
*/

public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        if (nums == null) {
            return list;
        }
        recursion(new ArrayList<Integer>(), 0, nums, list);
        return list;
    }
    
    private void recursion(List<Integer> tmp, int idx, int[] ar, 
            List<List<Integer>> list) {
        if (idx == ar.length) {
            list.add(new ArrayList<Integer>(tmp));
            return;
        }
        Set<Integer> set = new HashSet<>();
        int pos = tmp.size();
        tmp.add(0);
        for (int i = idx; i < ar.length; i++) {
            if (set.add(ar[i])) {
                tmp.set(pos, ar[i]);
                swap(ar, i, idx);
                recursion(tmp, idx + 1, ar, list);
                swap(ar, i, idx);
            }
        }
        tmp.remove(pos);
    }
    
    private void swap(int[] ar, int i, int j) {
        int tmp = ar[i];
        ar[i] = ar[j];
        ar[j] = tmp;
    }
}
