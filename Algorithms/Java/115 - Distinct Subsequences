/*
Given a string S and a string T, count the number of distinct subsequences of T in S.

A subsequence of a string is a new string which is formed from the original string by deleting some 
(can be none) of the characters without disturbing the relative positions of the remaining characters. 
(ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).

Here is an example:
S = "rabbbit", T = "rabbit"
Return 3.
*/

public class Solution {
    public int numDistinct(String s, String t) {
        if (s == null || t == null) {
            return 0;
        }
        return nSpaceDP(s, t);
        //return mnSpaceDP(s, t);
    }
    
/*
    M[i][j]: cnt of distinct subsequences found of t[0~i] in s[0~j]
    M[i][j] = M[i][j - 1] + M[i - 1][j - 1] if t[i] = s[j]
            = M[i][j - 1] else
    base case:
    M[0][j] = 1
    
    optimization: space O(m*n) -> O(n)
*/
    private int nSpaceDP(String s, String t) {
        int[] M = new int[s.length() + 1];
        for (int j = 0; j < s.length(); j++) {
            M[j] = 1;
        }
        for (int i = 1; i <= t.length(); i++) {
            int topLeft = M[0], top;
            M[0] = 0;
            for (int j = 1; j <= s.length(); j++) {
                top = M[j];
                M[j] = M[j - 1] + (t.charAt(i - 1) == s.charAt(j - 1) ? topLeft : 0);
                topLeft = top;
            }
        }
        return M[s.length()];
    }
    
    private int mnSpaceDP(String s, String t) {
        int[][] M = new int[t.length() + 1][s.length() + 1];
        for (int j = 0; j < s.length(); j++) {
            M[0][j] = 1;
        }
        for (int i = 1; i <= t.length(); i++) {
            for (int j = 1; j <= s.length(); j++) {
                M[i][j] = M[i][j - 1] + (t.charAt(i - 1) == s.charAt(j - 1) ? M[i - 1][j - 1] : 0);
            }
        }
        return M[t.length()][s.length()];
    }
}
