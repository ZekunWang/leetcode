/*
Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].
*/

public class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] res = new int[]{-1, -1};
        if (nums == null || nums.length == 0) {
            return res;
        }
        res[0] = binarySearch(nums, 0, nums.length - 1, target);
        if (res[0] < nums.length && nums[res[0]] == target) {
            res[1] = binarySearch(nums, res[0] + 1, nums.length - 1, target + 1) - 1;
        } else {
            res[0] = -1;
        }
        return res;
    }
    
    private int binarySearch(int[] ar, int left, int right, int target) {
        int mid;
        while (left < right) {
            mid = left + (right - left) / 2;
            if (ar[mid] >= target) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return ar[right] < target ? right + 1 : right;
    }
}
