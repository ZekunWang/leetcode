/*
Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.
For example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9.
*/

/*
    definition: m[i]: min num if number to do squarely sum to i
    induction rule: m[i] = min(m[i - k * k] + 1), k * k <= i
    base case: m[1] = 1
    complexity: O(n*n^(1/2)) -> O(n^(3/2)) time, O(n) space
*/

public class Solution {
    public int numSquares(int n) {
        if (n < 1) {
            return 0;
        } else if (n < 4) {
            return n;
        }
        return nSpaceDP(n);
    }
    
    private int nSpaceDP(int n) {
        int[] M = new int[n + 1];
        M[1] = 1;
        for (int i = 2; i <= n; i++) {
            M[i] = i;
            for (int j = 1; j * j <= i; j++) {
                M[i] = Math.min(M[i], M[i - j * j] + 1);
            }
        }
        return M[n];
    }
}
