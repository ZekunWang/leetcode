/*
Given a list, rotate the list to the right by k places, where k is non-negative.

For example:
Given 1->2->3->4->5->NULL and k = 2,
return 4->5->1->2->3->NULL.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || head.next == null) {
            return head;
        }
        int len = 0;
        ListNode fast = head, newHead, newTail = head;
        while (fast != null) {
            len++;
            fast = fast.next;
        }
        k %= len;
        if (k == 0) {
            return head;
        }
        fast = head;
        while (k-- > 0) {
            fast = fast.next;
        }
        while (fast.next != null) {
            fast = fast.next;
            newTail = newTail.next;
        }
        newHead = newTail.next;
        fast.next = head;
        newTail.next = null;
        return newHead;
    }
}
