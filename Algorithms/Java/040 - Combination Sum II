/*
Given a collection of candidate numbers (C) and a target number (T), 
find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8, 
A solution set is: 
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
*/

public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> list = new ArrayList<>();
        if (candidates == null || candidates.length == 0) {
            return list;
        }
        Arrays.sort(candidates);
        recursion(new ArrayList<Integer>(), candidates, 0, target, list);
        return list;
    }
    
    private void recursion(List<Integer> temp, int[] array, int index, 
            int target, List<List<Integer>> list) {
        if (target == 0) {
            list.add(new ArrayList<Integer>(temp));
            return;
        } else if (index == array.length || target < array[index]) {
            return;
        }
        
        // state 1: add array[index]
        temp.add(array[index]);
        recursion(temp, array, index + 1, target - array[index], list);
        temp.remove(temp.size() - 1);

        // state 2: add 0 array[index] and skip all identical numbers
        while (index + 1 < array.length && array[index + 1] == array[index]) {
            index++;
        }
        recursion(temp, array, index + 1, target, list);
    }
}
