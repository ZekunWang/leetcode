/*
Given a collection of distinct numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
*/

public class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return list;
        }
        recursion(nums, 0, list);
        return list;
    }
    
    private void recursion(int[] ar, 
            int idx, List<List<Integer>> list) {
        if (idx == ar.length) {
            int pos = list.size();
            list.add(new ArrayList<>());
            List<Integer> tmp = list.get(pos);
            for (int n : ar) {
                tmp.add(n);
            }
            return;
        }
        for (int i = idx; i < ar.length; i++) {
            swap(ar, i, idx);
            recursion(ar, idx + 1, list);
            swap(ar, i, idx);
        }
    }
    
    private void swap(int[] ar, int i, int j) {
        int tmp = ar[i];
        ar[i] = ar[j];
        ar[j] = tmp;
    }
}
