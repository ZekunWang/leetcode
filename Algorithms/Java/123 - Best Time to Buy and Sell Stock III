/*
Say you have an array for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
*/

public class Solution {
    public int maxProfit(int[] prices) {
        if (prices == null || prices.length < 2) {
            return 0;
        }
        return constantSpaceDP(prices);
        //return nSpaceDP(prices);
        //return mnSpaceDP(prices);
    }
/*
    buy1[i]: max profit of buy1 between p[0] ~ p[i], total transaction is 1
    sell1[i]: max profit of sell1 between p[0] ~ p[i], total transaction is 1
    buy2[i]: max profit of buy2 between p[0] ~ p[i], total transaction is 2
    sell2[i]: max profit of sell2 between p[0] ~ p[i], total transaction is 2
    
    sell2[i] = max(sell2[i - 1], buy2[i - 1] + p[i])
    buy2[i] = max(buy2[i - 1], sell1[i - 1] - p[i])ï¼Œ buy2 depends on previous sell1
    
    sell1[i] = max(sell1[i - 1], buy1[i - 1] + p[i])
    buy1[i] = max(buy1[i - 1], -p[i])
    
    optimization: space O(4n) -> O(4)
*/    
    private int constantSpaceDP(int[] p) {
        int buy1 = Integer.MIN_VALUE, sell1 = 0, buy2 = Integer.MIN_VALUE, sell2 = 0;
        for (int tp : p) {
            sell2 = Math.max(sell2, buy2 + tp);
            buy2 = Math.max(buy2, sell1 - tp);
            sell1 = Math.max(sell1, buy1 + tp);
            buy1 = Math.max(buy1, -tp);
        }
        return Math.max(sell1, sell2);
    }

/*
    M[i][j]: max profit of i-th transaction from day 0 to day j
    M[i][j] = max(M[i][j - 1], max(M[i - 1][k] + p[j] - p[k])), k from 0 to j - 1
            = max(M[i][j - 1], p[j] + max(M[i - 1][k] - p[k]))
            = max(M[i][j - 1], p[j] + tmp);
        tmp = Math.max(tmp, M[i - 1][j] - p[j]);
    optimization: space O(m*n) -> O(n)
*/
    
    private int nSpaceDP(int[] p) {
        int[] M = new int[p.length];
        for (int i = 1; i < 3; i++) {
            int tmp = M[0] - p[0], top;
            for (int j = 1; j < p.length; j++) {
                top = M[j];
                M[j] = Math.max(M[j - 1], tmp + p[j]);
                tmp = Math.max(tmp, top - p[j]);
            }
        }
        return M[p.length - 1];
    }
    
    private int mnSpaceDP(int[] p) {
        int[][] M = new int[3][p.length];
        for (int i = 1; i < 3; i++) {
            int tmp = M[i - 1][0] - p[0];
            for (int j = 1; j < p.length; j++) {
                M[i][j] = Math.max(M[i][j - 1], tmp + p[j]);
                tmp = Math.max(tmp, M[i - 1][j] - p[j]);
            }
        }
        return M[2][p.length - 1];
    }
}
