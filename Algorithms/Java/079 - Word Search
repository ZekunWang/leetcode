/*
Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, 
where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.
*/

public class Solution {
    public boolean exist(char[][] board, String word) {
        if (board == null || board.length == 0 || board[0].length == 0 || 
                word == null || word.length() == 0) {
            return false;
        }
        
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (recursion(word, 0, board, i, j)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean recursion(String word, int idx, char[][] brd, int row, int col) {
        if (idx == word.length()) {
            return true;
        } else if (row < 0 || row >= brd.length || col < 0 || col >= brd[0].length) {
            return false;
        }
        char ch = word.charAt(idx);
        if (brd[row][col] != ch) {
            return false;
        }
        boolean result = false;
        brd[row][col] ^= 256;   // make char not among 0 ~ 255, like putting into a set
        // try all directions
        if (recursion(word, idx + 1, brd, row + 1, col) || recursion(word, idx + 1, brd, row - 1, col) ||
                recursion(word, idx + 1, brd, row, col + 1) || recursion(word, idx + 1, brd, row, col - 1)) {
            result = true;
        }
        brd[row][col] ^= 256;   // change char back to original value
        return result;
    }
}
