/*
You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order 
and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        } else if (l2 == null) {
            return l1;
        }
        int cin = 0, cur = 0;
        ListNode dummy = new ListNode(0), tmp = dummy;
        while (l1 != null && l2 != null) {
            cur = l1.val + l2.val + cin;
            cin = cur / 10;    // accumulate cin
            cur %= 10;  // get remainder
            tmp.next = new ListNode(cur);
            tmp = tmp.next;
            l1 = l1.next;
            l2 = l2.next;
        }
        while (l1 != null) {
            cur = l1.val + cin;
            cin = cur / 10;    // accumulate cin
            cur %= 10;  // get remainder
            tmp.next = new ListNode(cur);
            tmp = tmp.next;
            l1 = l1.next;
        }
        while (l2 != null) {
            cur = l2.val + cin;
            cin = cur / 10;    // accumulate cin
            cur %= 10;  // get remainder
            tmp.next = new ListNode(cur);
            tmp = tmp.next;
            l2 = l2.next;
        }
        if (cin > 0) {
            tmp.next = new ListNode(cin);
        }
        return dummy.next;
    }
}
