/*
You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
*/

public class Solution {
    public int climbStairs(int n) {
        //return nSpaceDP(n);
        return constantSpaceDP(n);
    }
    
    /*
        definition: M[i] = num of distinct ways from 0-th to i-th stairs (inclusive)
        induction rule: M[i] = M[i - 1] + M[i - 2]; // similar to fibonacci
        base case: M[0] = 1, M[1] = 1, M[2] = 2
        complexity: O(n) time, O(n) space
        optimization: space O(n) -> O(2) = O(1)
    */
    
    private int nSpaceDP(int n) {
        if (n < 2) {
            return n;
        }
        int[] M = new int[n + 1];
        M[0] = 1;
        M[1] = 1;
        for (int i = 2; i <= n; i++) {
            M[i] = M[i - 1] + M[i - 2];
        }
        return M[n];
    }
    
    private int constantSpaceDP(int n) {
        if (n < 2) {
            return n;
        }
        int pre = 1, cur = 1;
        for (int i = 2; i <= n; i++) {
            cur += pre;
            pre = cur - pre;
        }
        return cur;
    }
}
