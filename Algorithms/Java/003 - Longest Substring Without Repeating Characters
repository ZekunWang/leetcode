/*
Given a string, find the length of the longest substring without repeating characters.

Examples:

Given "abcabcbb", the answer is "abc", which the length is 3.
Given "bbbbb", the answer is "b", with the length of 1.
Given "pwwkew", the answer is "wke", with the length of 3. Note that the answer must be a substring, 
"pwke" is a subsequence and not a substring.
*/

public class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s == null) {
            return 0;
        } else if (s.length() < 2) {
            return s.length();
        }
        Set<Character> set = new HashSet<>();
        int res = 0;
        for (int tail = 0; tail < s.length(); tail++) {
            char tailChar = s.charAt(tail);
            if (!set.add(tailChar)) { // reach end of cur nonreaping substring
                res = Math.max(res, set.size());    // update res
                for (int head = tail - set.size(); head < tail; head++) {
                    char headChar = s.charAt(head);
                    if (headChar == tailChar) {
                        break;
                    }
                    set.remove(headChar);
                }
            }
        }
        res = Math.max(res, set.size());
        return res;
    }
}
