/*
Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [−2,1,−3,4,−1,2,1,−5,4],
the contiguous subarray [4,−1,2,1] has the largest sum = 6.

More practice:
If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, 
which is more subtle.
*/

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
    //    return solution1(nums, nums.size());
        return solution2(nums, nums.size());
    }
private:
    int solution1(vector<int> v, int sz){
        int sum(v[0]), tmp(-1);
        for(int i = 0; i < sz; i++){
            if(tmp > 0 && v[i] + tmp > 0) tmp += v[i];
            else tmp = v[i];
            sum = max(sum, tmp);
        }
        return sum;
    }
    int solution2(vector<int> v, int sz){
        int sum(v[0]), tmp(0);
        for(int i = 0; i < sz; i++){
            tmp += v[i];
            sum = max(sum, tmp);
            tmp = max(tmp, 0);
        }
        return sum;
    }
};
