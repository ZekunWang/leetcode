Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. 
Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, 
there should be no "holes" between ranks.

+----+-------+
| Id | Score |
+----+-------+
| 1  | 3.50  |
| 2  | 3.65  |
| 3  | 4.00  |
| 4  | 3.85  |
| 5  | 4.00  |
| 6  | 3.65  |
+----+-------+
For example, given the above Scores table, your query should generate the following report (order by highest score):

+-------+------+
| Score | Rank |
+-------+------+
| 4.00  | 1    |
| 4.00  | 1    |
| 3.85  | 2    |
| 3.65  | 3    |
| 3.65  | 3    |
| 3.50  | 4    |
+-------+------+


# Write your MySQL query statement below
#select score, @rank:=@rank+(@prev!=@prev:=score) Rank
#from Scores, (select @rank:=0, @prev:=-1) t
#order by score desc

#select score, (select count(*) 
#                from (select distinct score s from Scores) t 
#                where t.s>=score) Rank
#from Scores
#order by score desc

select score, (select count(*)
                from (select score s from Scores group by score) t 
                where t.s>=score) Rank
from Scores s
order by score desc
