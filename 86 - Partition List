/*
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode nhead(INT_MIN), *cur(&nhead), *tmp, *prv(NULL);
        nhead.next = head;
        while(cur->next){
            if(cur->next->val >= x){
                if(!prv) prv = cur; //find 1st node's next val >= x and will always points to val >= x
                cur = cur->next;
            }else{
                if(prv){
                    tmp = cur->next;
                    cur->next = tmp->next;
                    tmp->next = prv->next;
                    prv->next = tmp;
                    prv = prv->next;
                }else cur = cur->next;
            }
        }
        return nhead.next;
    }
};
