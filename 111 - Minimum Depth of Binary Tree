/*
Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        if(!root) return 0;
        //return solution1(root);     //DFS
        return solution2(root);     //BFS
    }
private:
    int solution1(TreeNode *root){
        if(!root->left && !root->right) return 1;
        int left = INT_MAX, right = INT_MAX;
        if(root->left) left = solution1(root->left);
        if(root->right) right = solution1(root->right);
        return min(left, right) + 1;
    }
    int solution2(TreeNode *root){
        int lvl = 1, count = 1, ncount = 0;;
        queue<TreeNode *> q;
        q.push(root);
        while(!q.empty()){
            TreeNode *tmp = q.front();
            count--;
            if(!tmp->left && !tmp->right) return lvl;
            if(tmp->left){
                q.push(tmp->left);
                ncount++;
            }
            if(tmp->right){
                q.push(tmp->right);
                ncount++;
            }
            if(!count){
                count = ncount;
                ncount = 0;
                lvl++;
            }
            q.pop();
        }
    }
};
