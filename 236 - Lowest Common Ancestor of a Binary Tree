/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        //return solution1(root, p, q);
        return solution2(root, p, q);
        
    }
    TreeNode* solution1(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root || !p || !p) return NULL;
        TreeNode *node1, *node2, *cur = NULL;
        
        int heightp = getHeight(p);
        int heightq = getHeight(q);
        node1 = heightp>heightq ? p : q;	//node1 in higher level
        node2 = heightp>heightq ? q : p;	//node2 in lower level
        
        stack<TreeNode*> *stk = new stack<TreeNode*>;
        stk->push(root); 
		if(!setPathSearch(root, node1, stk)){delete stk; return NULL;}
        if(!searchPath(stk, node2)){delete stk; return NULL;}
        cur = stk->top();
		delete stk; 
        return cur;
    }
    TreeNode* solution2(TreeNode *root, TreeNode *p, TreeNode *q){
        if(!root) return NULL;
        if(root == q || root == p) return root;
        TreeNode *left = solution2(root->left, p, q);
        TreeNode *right = solution2(root->right, p, q);
        if(left && right) return root;
        if(!left && !right) return NULL;
        return left ? left : right;
    }
private:
	int getHeight(TreeNode *node){
		if(!node) return 0;
		return max(getHeight(node->left), getHeight(node->right)) + 1;
	}
	bool setPathSearch(TreeNode *path, TreeNode *node, stack<TreeNode*> *stk){
		if(!path) return false;
		stk->push(path->left);
		if(setPathSearch(path->left, node, stk)) return true; 
		stk->pop();
		if(path == node) return true;
		stk->push(path->right);
		if(setPathSearch(path->right, node, stk)) return true; 
		stk->pop();
		return false; 
	}
	bool searchPath(stack<TreeNode*> *stk, TreeNode *node){
		TreeNode *cur, *next;
		bool flag = true, jump = false; 
		while(!stk->empty()){
			if(jump){
				stk->pop();
				jump = false; 
				continue; 
			} 
			cur = stk->top();
			if(deepSearch(cur, node)){
				if(!flag) stk->pop();
				return true;
			} 
			stk->pop();
			if(flag){ 
				next = stk->top();
				next = next->left==cur ? next->right : next->left;
				stk->push(next);
			}else jump = true;  
			flag = !flag;
		}  
		return false; 
	} 
    bool deepSearch(TreeNode* path, TreeNode* node){
		if(!path) return false;
        if(deepSearch(path->left, node)) return true;
        if(path == node) return true;
        if(deepSearch(path->right, node)) return true;
        return false;
    }
};
