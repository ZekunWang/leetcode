/*
Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,
return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        return solution1(head, m, n);
    }
private:
    ListNode *solution1(ListNode *head, int m, int n){
        if(m >= n) return head;
        ListNode nhead(0), *start(&nhead), *cur, *tmp;
        int count(0);
        nhead.next = head;
        while(++count != m) start = start->next;
        cur = start->next;
        while(count++ != n){
            tmp = cur->next;
            cur->next = tmp->next;
            tmp->next = start->next;;
            start->next = tmp;
        }
        return nhead.next;
    }
};
