/*
Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return solution1(preorder, 0, preorder.size() - 1, inorder, 0, inorder.size() - 1);
    }
private:
    TreeNode *solution1(vector<int> &pre, int ps, int pe, vector<int> &in, int is, int ie){
        if(ps > pe || is > ie) return NULL;
        TreeNode *node = new TreeNode(pre[ps]);
        int pos(0);
        while(in[pos] != node->val) pos++;
        node->left = solution1(pre, ps + 1, ps - is + pos, in, is, pos - 1);
        node->right = solution1(pre, pe - ie + pos + 1, pe, in, pos + 1, ie);
        return node;
    }
};
