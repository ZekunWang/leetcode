/*
Given n, how many structurally unique BST's (binary search trees) that store values 1...n?

For example,
Given n = 3, there are a total of 5 unique BST's.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
*/

class Solution {
public:
    int numTrees(int n) {
        //return solution1(n);
        return solution2(n);
    }
private:
    int solution1(int n) {
        int res[n + 1] = {};
        res[0] = res[1] = 1;
        for(int i = 2; i <= n; i++)
            for(int j = 1; j <= i; j++)
                res[i] += res[j - 1] * res[i - j];
        return res[n];
    }
    int solution2(int n){
        int res[n + 1] = {};
        res[0] = res[1] = 1;
        for(int i = 2; i <= n; i++){
            for(int j = 1; j <= i / 2; j++)
                res[i] += res[j - 1] * res[i - j];
            res[i] *= 2;
            if(i % 2) res[i] += res[i / 2] * res[i / 2];
        }
        return res[n];
    }
};
