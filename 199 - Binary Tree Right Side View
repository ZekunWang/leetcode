/*
Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you 
can see ordered from top to bottom.

For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
You should return [1, 3, 4].
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        return solution1(root);
    }
private:
    vector<int> solution1(TreeNode *root){
        int height = getHeight(root);   //size of vector
        vector<int> v;
        traversal(root, v, 1, height);
        return v;
    }
    int getHeight(TreeNode *node){
        if(!node) return 0;
        return max(getHeight(node->left), getHeight(node->right)) + 1;
    }
    void traversal(TreeNode *node, vector<int> &v, int cur, int height){
                        //current node, vector, current size, target size
        if(!node) return;
        if(cur > v.size()) v.push_back(node->val);
        if(node->right) traversal(node->right, v, cur + 1, height);
        if(cur == height) return;
        if(node->left) traversal(node->left, v, cur + 1, height);
    }
};
