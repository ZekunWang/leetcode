/*
Given an unsorted array of integers, find the length of the longest consecutive elements sequence.

For example,
Given [100, 4, 200, 1, 3, 2],
The longest consecutive elements sequence is [1, 2, 3, 4]. Return its length: 4.

Your algorithm should run in O(n) complexity.
*/

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
    //    return solution1(nums); //non O(n)
    //    return solution2(nums); //O(n)
        return solution3(nums); //solution2 in concise format
    }
private:
    int solution1(vector<int> nums){
        sort(nums.begin(),nums.end());
        int start(0), end(1), count(0), skip(0);
        for(; end < nums.size(); end++){
            int tmp = nums[end]-nums[start];
            if(nums[end] == nums[end - 1]) skip++;
            else if((long)nums[end] - nums[start] != end - start - skip){
                count = max(count, end - start - skip);
                start = end;
                skip = 0;
            }
        }
        count = max(count, end - start - skip);
        return count;
    }
    int solution2(vector<int> nums){
        unordered_map<int, int> m;
        int r(0);
        for(int n : nums){
            if(m[n]) continue;
            if(!m[n-1]){
                m[n] = m[n + m[n+1]] = m[n+1] + 1;
                r = max(r, m[n]);
                continue;
            }
            if(!m[n+1]){
                m[n] = m[n - m[n-1]] = m[n-1] + 1;
                r = max(r, m[n]);
                continue;
            }
            m[n] = m[n + m[n+1]] = m[n - m[n-1]] = m[n+1] + m[n-1] + 1;
            r = max(r, m[n]);
        }
        return r;
    }
    int solution3(vector<int> nums){
        unordered_map<int, int> m;
        int r(0);
        for(int n : nums)
            if(!m[n]) r = max(r, m[n] = m[n + m[n+1]] = m[n - m[n-1]] = m[n+1] + m[n-1] + 1);
        return r;
    }
};
