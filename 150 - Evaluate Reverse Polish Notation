/*
Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Some examples:
  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6
*/

class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        int sz(tokens.size());
        if(!sz) return 0;
        int res(stoi(tokens[0]));
        if(sz == 1) return res;
        stack<int> st;
        for(int i = 1; i < sz; i++){
            if(tokens[i][tokens[i].length() - 1] < '0'){
                res = cal(st.top(), res, tokens[i][0]);
                st.pop();
            }else{
                st.push(res);
                res = stoi(tokens[i]);
            }
        }
        return res;
    }
private:
    int cal(int l, int r, char o){
        switch(o){
            case '+': return l + r;
            case '-': return l - r;
            case '*': return l * r;
            case '/': return l / r;
        }
    }
};
