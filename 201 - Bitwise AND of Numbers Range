class Solution {
public:
    int rangeBitwiseAnd(int m, int n) {
        //return solution1(m, n);
        return solution2(m, n);
    }
private:
    int solution1(int m, int n) {
        if((m ^ n) > m) return 0;    //n has more num of digits than m, includeing m = 0
        if(m == n) return m;        //if m == n
        
        int result = m;
        for(unsigned int i = m + 1; i <= n; i++)
    		result &= i;
        return result;
    }
    int solution2(int m, int n) {
        if((m ^ n) > m) return 0;    //n has more num of digits than m
        if(m == n) return m;        //if m == n
        int tmp = 1 << (getDigits(m) - 1);
        return tmp + solution2(m - tmp, n - tmp);
    }
    int getDigits(int num){
        if(num == 0) return 0;
        return 1 + getDigits(num >> 1);
    }
};
