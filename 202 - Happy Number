/*
Write an algorithm to determine if a number is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, 
replace the number by the sum of the squares of its digits, and repeat the process until the number 
equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers 
for which this process ends in 1 are happy numbers.

Example: 19 is a happy number

12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
*/
class Solution {
public:
    bool isHappy(int n) {
        unordered_set<int> v;
        //return solution1(&v, n);
        return solution2(n);
    }
private:
    bool solution1(unordered_set<int> *v, int n){
        if(!n) return false;
        if(n == 1) return true;
        if(v->find(n) != v->end()) return false;
        v->insert(n);
        return solution1(v, sumDigits(n));
    }
    int sumDigits(int n){
        int sum = 0, dig = 0;
        while(n){
            dig = n % 10;
            sum += dig * dig;
            n = n / 10;
        }
        return sum;
    }
    bool solution2(int n){
        if(!n) return false;
        if(n == 1) return true;
        if(n==4 || n==16 || n==20 || n==37 || n==42 || n==58 || n==89 || n==145)
            return false;
        return solution2(sumDigits(n));
    }
};
