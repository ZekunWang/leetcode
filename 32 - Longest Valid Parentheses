/*
Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) 
parentheses substring.

For "(()", the longest valid parentheses substring is "()", which has length = 2.

Another example is ")()())", where the longest valid parentheses substring is "()()", which has length = 4.
*/

class Solution {
public:
    int longestValidParentheses(string s) {
        int sz(s.length()), res(0), len(0);
        if(sz < 2) return 0;
        stack<int> st;
        for(int i = 0; i < sz; i++)
        {
            if(s[i] == '(') st.push(i);
            else if(!st.empty() && s[st.top()] == '(') {
                st.pop();
                int pos = -1;
                if(!st.empty()) pos = st.top();
                len = i - pos;
                res = (res < len) ? len : res;
            }else st.push(i);
        }
        return res;
    }
};
