/*
Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].

Note:
You must do this in-place without making a copy of the array.
Minimize the total number of operations.
*/

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        //solution1(nums);
        //solution2(nums);
        solution3(nums);
    }
private:
    void solution1(vector<int> &nums){
        for(int i = 0, pos = 0; i < nums.size(); i++){
            if(nums[pos]) pos++;
            else{
                nums.erase(nums.begin() + pos); //erase 0
                nums.push_back(0);      //add 0 to the back
            }
        }
    }
    void solution2(vector<int> &nums){
        int cur = 0, sz = nums.size();
        while(nums[cur]) cur++;    //find 1st 0
        for(int i = cur + 1; i < sz; i++){  //swap current 0 with next non-zero element
            if(nums[i]) swap(nums[cur++], nums[i]);
        }
    }
    void solution3(vector<int> &nums){
        int cur = 0, sz = nums.size();
        while(nums[cur]) cur++;     //find 1st 0
        for(int i = cur + 1; i < sz; i++)   //cur equals to next non-zero element
            if(nums[i]) nums[cur++] = nums[i];
        while(cur < sz) nums[cur++] = 0;    //set rest elements to 0
    }
};
