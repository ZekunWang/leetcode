/*
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        //return solution1(root);       //recursive with queue
        return solution2(root);       //recursive
    }
private:
    vector<vector<int>> v;
    vector<vector<int>> solution1(TreeNode *root){
        if(!root) return v;
        queue<TreeNode *> q;
        q.push(root);
        subSol1(q, 1);
        reverse(v.begin(), v.end());
        return v;
    }
    void subSol1(queue<TreeNode *> &q, int count){
        if(q.empty()) return;
        vector<int> vt;
        TreeNode *node;
        int tmp = 0;
        while(count){
            node = q.front();
            q.pop();
            vt.push_back(node->val);
            if(node->left){q.push(node->left); tmp++;}
            if(node->right){q.push(node->right); tmp++;}
            count--;
        }
        v.push_back(vt);
        subSol1(q, tmp);
    }
    vector<vector<int>> solution2(TreeNode *root){
        subSol2(root, 0);
        reverse(v.begin(), v.end());
        return v;
    }
    void subSol2(TreeNode *root, int depth){
        if(!root) return;
        if(v.size() <= depth) v.push_back(vector<int>());
        v[depth].push_back(root->val);
        subSol2(root->left, depth + 1);
        subSol2(root->right, depth + 1);
    }
};
