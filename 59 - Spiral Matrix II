/*
Given an integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.

For example,
Given n = 3,

You should return the following matrix:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]
*/

class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        if(!n) return vector<vector<int>>();
        vector<vector<int>> v(n, vector<int>(n,0));
        solution1(v, 0, 0, 1, n * n, 0);
        return v;
    }
private:
    void solution1(vector<vector<int>> &v, int r, int c, int ct, int tg, int dir){
        if(ct > tg) return;
        v[r][c] = ct;
        switch(dir){
            case 0: if(c + 1 < v.size() && !v[r][c + 1]) c++;
                    else {r++; dir = 1;}
                    break;
            case 1: if(r + 1 < v.size() && !v[r + 1][c]) r++;
                    else {c--; dir = 2;}
                    break;
            case 2: if(c > 0 && !v[r][c - 1]) c--;
                    else {r--; dir = 3;}
                    break;
            case 3: if(r > 0 && !v[r - 1][c]) r--;
                    else {c++; dir = 0;}
                    break;
        }
        solution1(v, r, c, ct + 1, tg, dir);
    }
};
