/*
Given a pattern and a string str, find if str follows the same pattern.
Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.

Examples:
pattern = "abba", str = "dog cat cat dog" should return true.
pattern = "abba", str = "dog cat cat fish" should return false.
pattern = "aaaa", str = "dog cat cat dog" should return false.
pattern = "abba", str = "dog dog dog dog" should return false.
Notes:
You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.
*/

class Solution {
public:
    bool wordPattern(string pattern, string str) {
        unordered_map<char, string> l;
        unordered_map<string, char> w;
        int lp(pattern.length()), ls(str.length()), i(0), j(0);
        while(i < lp && j < ls){
            int tmp(j);
            while(tmp < ls && str[tmp] != ' ') tmp++;
            string tmpstr(str.substr(j, tmp - j));
            char c(pattern[i++]);
            j = tmp + 1;
            if(l.find(c) == l.end() && w.find(tmpstr) == w.end()){
                l[c] = tmpstr;
                w[tmpstr] = c;
            }else if(w[l[c]] == w[tmpstr]) continue;
            else return false;
        }
        return i >= lp && j >= ls ? true : false;
    }
};
